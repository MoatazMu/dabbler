import 'dart:async';

import '../../../core/utils/either.dart';
import '../../../core/services/storage_service.dart';
import '../../../core/analytics/analytics_service.dart';
import '../data/models/social_monitoring_models.dart';
import 'social_analytics_service.dart';
import 'social_health_monitoring_service.dart';
import 'social_performance_monitoring_service.dart';
import 'social_error_tracking_service.dart' as error_service;
import 'social_abuse_detection_service.dart';

/// Comprehensive social features monitoring dashboard service
class SocialMonitoringDashboardService {
  final AnalyticsService _analytics;
  final StorageService _storage;
  final SocialAnalyticsService _socialAnalytics;
  final SocialHealthMonitoringService _healthMonitoring;
  final SocialPerformanceMonitoringService _performanceMonitoring;
  final error_service.SocialErrorTrackingService _errorTracking;
  final SocialAbuseDetectionService _abuseDetection;

  // Dashboard state
  Timer? _dashboardUpdateTimer;
  SocialMonitoringDashboard? _cachedDashboard;
  DateTime? _lastDashboardUpdate;

  // Configuration
  static const Duration _updateInterval = Duration(minutes: 5);
  static const Duration _cacheValidDuration = Duration(minutes: 3);

  SocialMonitoringDashboardService({
    required AnalyticsService analytics,
    required StorageService storage,
    required SocialAnalyticsService socialAnalytics,
    required SocialHealthMonitoringService healthMonitoring,
    required SocialPerformanceMonitoringService performanceMonitoring,
    required SocialErrorTrackingService errorTracking,
    required SocialAbuseDetectionService abuseDetection,
  })  : _analytics = analytics,
        _storage = storage,
        _socialAnalytics = socialAnalytics,
        _healthMonitoring = healthMonitoring,
        _performanceMonitoring = performanceMonitoring,
        _errorTracking = errorTracking,
        _abuseDetection = abuseDetection {
    _initializeDashboard();
  }

  /// Initialize dashboard monitoring
  void _initializeDashboard() {
    // Update dashboard every 5 minutes
    _dashboardUpdateTimer = Timer.periodic(_updateInterval, (_) async {
      await _updateDashboard();
    });

    // Initial dashboard load
    _updateDashboard();
  }

  /// Get comprehensive monitoring dashboard
  Future<Either<String, SocialMonitoringDashboard>> getDashboard({
    Duration period = const Duration(hours: 24),
    bool forceRefresh = false,
  }) async {
    try {
      final now = DateTime.now();

      // Check cache validity
      if (!forceRefresh && 
          _cachedDashboard != null &&
          _lastDashboardUpdate != null &&
          now.difference(_lastDashboardUpdate!) < _cacheValidDuration) {
        return Right(_cachedDashboard!);
      }

      // Gather data from all monitoring services in parallel
      final results = await Future.wait([
        _healthMonitoring.getSocialHealthMetrics(period: period),
        _performanceMonitoring.getPerformanceMetrics(period: period),
        _errorTracking.getErrorMetrics(period: period),
        _abuseDetection.getAbuseMetrics(period: period),
      ]);

      // Check if any service failed
      for (final result in results) {
        if (result.isLeft) {
          final error = result.leftOrNull();
          return Left('Failed to gather monitoring data: ${error}');
        }
      }

      // Extract the data
      final healthMetrics = results[0].rightOrNull() as SocialHealthMetrics?;
      final performanceMetrics = results[1].rightOrNull() as SocialPerformanceMetrics?;
      final errorMetrics = results[2].rightOrNull() as SocialErrorMetrics?;
      final abuseMetrics = results[3].rightOrNull() as SocialAbuseMetrics?;

      if (healthMetrics == null || performanceMetrics == null || errorMetrics == null || abuseMetrics == null) {
        return const Left('Missing required monitoring data');
      }

      // Calculate overall system status
      final systemStatus = _calculateOverallSystemStatus(
        healthMetrics, performanceMetrics, errorMetrics, abuseMetrics);

      // Generate alerts and recommendations
      final alerts = await _generateDashboardAlerts(
        healthMetrics, performanceMetrics, errorMetrics, abuseMetrics);
      final recommendations = await _generateDashboardRecommendations(
        healthMetrics, performanceMetrics, errorMetrics, abuseMetrics);

      // Create dashboard
      final dashboard = SocialMonitoringDashboard(
        period: period,
        generatedAt: now,
        systemStatus: systemStatus,
        healthMetrics: healthMetrics,
        performanceMetrics: performanceMetrics,
        errorMetrics: errorMetrics,
        abuseMetrics: abuseMetrics,
        alerts: alerts,
        recommendations: recommendations,
        trends: await _calculateDashboardTrends(period),
        summary: _generateDashboardSummary(
          healthMetrics, performanceMetrics, errorMetrics, abuseMetrics),
      );

      // Cache the dashboard
      _cachedDashboard = dashboard;
      _lastDashboardUpdate = now;

      return Right(dashboard);
    } catch (e) {
      return Left('Failed to generate monitoring dashboard: $e');
    }
  }

  /// Get real-time monitoring status
  Future<Either<String, RealTimeMonitoringStatus>> getRealTimeStatus() async {
    try {
      final now = DateTime.now();
      final last5Minutes = const Duration(minutes: 5);

      // Get recent data from all services
      final healthResult = await _healthMonitoring.getSocialHealthMetrics(
        period: last5Minutes, forceRefresh: true);
      final performanceResult = await _performanceMonitoring.getPerformanceMetrics(
        period: last5Minutes, forceRefresh: true);
      final errorResult = await _errorTracking.getErrorMetrics(
        period: last5Minutes);
      final abuseResult = await _abuseDetection.getAbuseMetrics(
        period: last5Minutes);

      // Check for failures
      if (healthResult.isLeft) return Left(healthResult.left);
      if (performanceResult.isLeft) return Left(performanceResult.left);
      if (errorResult.isLeft) return Left(errorResult.left);
      if (abuseResult.isLeft) return Left(abuseResult.left);

      final status = RealTimeMonitoringStatus(
        timestamp: now,
        systemHealth: _calculateSystemHealthStatus(healthResult.right),
        performanceStatus: _calculatePerformanceStatus(performanceResult.right),
        errorStatus: _calculateErrorStatus(errorResult.right),
        securityStatus: _calculateSecurityStatus(abuseResult.right),
        criticalAlerts: await _getCriticalAlerts(),
        activeIncidents: await _getActiveIncidents(),
        serviceUptime: await _calculateServiceUptime(),
      );

      return Right(status);
    } catch (e) {
      return Left('Failed to get real-time status: $e');
    }
  }

  /// Get monitoring insights and analytics
  Future<Either<String, MonitoringInsights>> getMonitoringInsights({
    Duration period = const Duration(days: 7),
  }) async {
    try {
      // Get historical data for trend analysis
      final insights = MonitoringInsights(
        period: period,
        generatedAt: DateTime.now(),
        healthInsights: await _generateHealthInsights(period),
        performanceInsights: await _generatePerformanceInsights(period),
        errorInsights: await _generateErrorInsights(period),
        securityInsights: await _generateSecurityInsights(period),
        correlationAnalysis: await _performCorrelationAnalysis(period),
        predictiveAnalytics: await _generatePredictiveAnalytics(period),
        actionableRecommendations: await _generateActionableRecommendations(period),
      );

      return Right(insights);
    } catch (e) {
      return Left('Failed to generate monitoring insights: $e');
    }
  }

  /// Export monitoring report
  Future<Either<String, String>> exportMonitoringReport({
    Duration period = const Duration(days: 30),
    ReportFormat format = ReportFormat.json,
    List<String>? sections,
  }) async {
    try {
      final dashboard = await getDashboard(period: period, forceRefresh: true);
      if (dashboard.isLeft) return Left(dashboard.left);

      final report = MonitoringReport(
        dashboard: dashboard.right,
        generatedAt: DateTime.now(),
        format: format,
        sections: sections ?? ['all'],
      );

      final exportedData = await _exportReport(report, format);
      return Right(exportedData);
    } catch (e) {
      return Left('Failed to export monitoring report: $e');
    }
  }

  /// Calculate overall system status
  SystemStatus _calculateOverallSystemStatus(
    SocialHealthMetrics health,
    SocialPerformanceMetrics performance,
    SocialErrorMetrics errors,
    SocialAbuseMetrics abuse,
  ) {
    // Health score (0-100)
    final healthScore = health.healthScores.overall;
    
    // Performance score (0-100)
    final performanceScore = _calculatePerformanceScore(performance);
    
    // Error score (0-100, higher is better)
    final errorScore = _calculateErrorScore(errors);
    
    // Security score (0-100)
    final securityScore = _calculateSecurityScore(abuse);

    // Overall score
    final overallScore = (healthScore + performanceScore + errorScore + securityScore) / 4;

    // Determine status level
    StatusLevel statusLevel;
    if (overallScore >= 90) {
      statusLevel = StatusLevel.excellent;
    } else if (overallScore >= 75) {
      statusLevel = StatusLevel.good;
    } else if (overallScore >= 60) {
      statusLevel = StatusLevel.warning;
    } else {
      statusLevel = StatusLevel.critical;
    }

    return SystemStatus(
      level: statusLevel,
      overallScore: overallScore,
      healthScore: healthScore,
      performanceScore: performanceScore,
      errorScore: errorScore,
      securityScore: securityScore,
      lastUpdated: DateTime.now(),
    );
  }

  /// Generate dashboard alerts
  Future<List<DashboardAlert>> _generateDashboardAlerts(
    SocialHealthMetrics health,
    SocialPerformanceMetrics performance,
    SocialErrorMetrics errors,
    SocialAbuseMetrics abuse,
  ) async {
    final alerts = <DashboardAlert>[];

    // Health alerts
    if (health.healthScores.overall < 70) {
      alerts.add(DashboardAlert(
        id: 'health_low',
        type: AlertType.health,
        severity: AlertSeverity.warning,
        title: 'Low Social Health Score',
        message: 'Overall social health score is ${health.healthScores.overall.toStringAsFixed(1)}%',
        timestamp: DateTime.now(),
        data: {'score': health.healthScores.overall},
      ));
    }

    // Performance alerts
    if (performance.feedPerformance.loadTimeScore < 60) {
      alerts.add(DashboardAlert(
        id: 'feed_performance',
        type: AlertType.performance,
        severity: AlertSeverity.warning,
        title: 'Slow Feed Loading',
        message: 'Feed load time score is ${performance.feedPerformance.loadTimeScore.toStringAsFixed(1)}%',
        timestamp: DateTime.now(),
        data: {'score': performance.feedPerformance.loadTimeScore},
      ));
    }

    // Error alerts
    if (errors.overallStats.criticalErrorCount > 0) {
      alerts.add(DashboardAlert(
        id: 'critical_errors',
        type: AlertType.error,
        severity: AlertSeverity.critical,
        title: 'Critical Errors Detected',
        message: '${errors.overallStats.criticalErrorCount} critical errors in the last ${errors.period.inHours} hours',
        timestamp: DateTime.now(),
        data: {'count': errors.overallStats.criticalErrorCount},
      ));
    }

    // Security/abuse alerts
    if (abuse.spamDetection.spamRate > 0.05) { // 5%
      alerts.add(DashboardAlert(
        id: 'high_spam_rate',
        type: AlertType.security,
        severity: AlertSeverity.warning,
        title: 'High Spam Rate',
        message: 'Spam rate is ${(abuse.spamDetection.spamRate * 100).toStringAsFixed(2)}%',
        timestamp: DateTime.now(),
        data: {'rate': abuse.spamDetection.spamRate},
      ));
    }

    return alerts;
  }

  /// Generate dashboard recommendations
  Future<List<DashboardRecommendation>> _generateDashboardRecommendations(
    SocialHealthMetrics health,
    SocialPerformanceMetrics performance,
    SocialErrorMetrics errors,
    SocialAbuseMetrics abuse,
  ) async {
    final recommendations = <DashboardRecommendation>[];

    // Health recommendations
    if (health.activeUsers.churnRate > 0.1) { // 10%
      recommendations.add(DashboardRecommendation(
        id: 'reduce_churn',
        category: RecommendationCategory.userEngagement,
        priority: RecommendationPriority.high,
        title: 'Reduce User Churn',
        description: 'Churn rate is ${(health.activeUsers.churnRate * 100).toStringAsFixed(1)}%. Consider implementing user retention strategies.',
        actions: [
          'Analyze exit surveys',
          'Improve onboarding experience',
          'Implement engagement campaigns',
        ],
        estimatedImpact: 'Could reduce churn by 20-30%',
      ));
    }

    // Performance recommendations
    if (performance.feedPerformance.averageLoadTime.inMilliseconds > 3000) {
      recommendations.add(DashboardRecommendation(
        id: 'optimize_feed_loading',
        category: RecommendationCategory.performance,
        priority: RecommendationPriority.high,
        title: 'Optimize Feed Loading',
        description: 'Average feed load time is ${performance.feedPerformance.averageLoadTime.inMilliseconds}ms. Users expect under 2 seconds.',
        actions: [
          'Implement feed caching',
          'Optimize database queries',
          'Consider pagination improvements',
        ],
        estimatedImpact: 'Could improve load times by 40-50%',
      ));
    }

    // Error recommendations
    if (errors.overallStats.errorRate > 5) { // 5 errors per hour
      recommendations.add(DashboardRecommendation(
        id: 'improve_error_handling',
        category: RecommendationCategory.reliability,
        priority: RecommendationPriority.medium,
        title: 'Improve Error Handling',
        description: 'Error rate is ${errors.overallStats.errorRate.toStringAsFixed(1)} per hour. Focus on most common error types.',
        actions: [
          'Review top error types',
          'Implement better error recovery',
          'Add more defensive programming',
        ],
        estimatedImpact: 'Could reduce errors by 30-40%',
      ));
    }

    return recommendations;
  }

  /// Update dashboard data
  Future<void> _updateDashboard() async {
    try {
      final dashboard = await getDashboard(forceRefresh: true);
      
      if (dashboard.isRight) {
        // Store dashboard state for historical analysis
        await _storeDashboardState(dashboard.right);
        
        // Check for critical conditions
        await _checkCriticalConditions(dashboard.right);
      }
    } catch (e) {
      print('Dashboard update failed: $e');
    }
  }

  // Helper calculation methods
  double _calculatePerformanceScore(SocialPerformanceMetrics performance) {
    // Weighted average of different performance aspects
    final feedScore = performance.feedPerformance.loadTimeScore;
    final messagingScore = performance.messagingPerformance.connectionStability * 100;
    final searchScore = performance.searchPerformance.searchAccuracy * 100;
    final systemScore = performance.systemHealth.overallHealthScore;

    return (feedScore * 0.3 + messagingScore * 0.2 + searchScore * 0.2 + systemScore * 0.3);
  }

  double _calculateErrorScore(SocialErrorMetrics errors) {
    // Convert error rate to score (lower errors = higher score)
    final baseScore = 100.0;
    final errorPenalty = errors.overallStats.errorRate * 2; // 2 points per error/hour
    final criticalPenalty = errors.overallStats.criticalErrorCount * 10; // 10 points per critical error
    
    return (baseScore - errorPenalty - criticalPenalty).clamp(0.0, 100.0);
  }

  double _calculateSecurityScore(SocialAbuseMetrics abuse) {
    double score = 100.0;
    
    // Deduct points for spam
    score -= abuse.spamDetection.spamRate * 100 * 0.5;
    
    // Deduct points for harassment
    score -= abuse.harassmentDetection.totalHarassmentDetected * 0.1;
    
    // Deduct points for bot activity
    score -= abuse.botDetection.suspiciousBotAccounts * 0.05;
    
    return score.clamp(0.0, 100.0);
  }

  // Status calculation methods
  HealthStatus _calculateSystemHealthStatus(SocialHealthMetrics health) {
    final score = health.healthScores.overall;
    
    if (score >= 90) return HealthStatus.excellent;
    if (score >= 75) return HealthStatus.good;
    if (score >= 60) return HealthStatus.warning;
    return HealthStatus.critical;
  }

  PerformanceStatus _calculatePerformanceStatus(SocialPerformanceMetrics performance) {
    final score = _calculatePerformanceScore(performance);
    
    if (score >= 90) return PerformanceStatus.optimal;
    if (score >= 75) return PerformanceStatus.good;
    if (score >= 60) return PerformanceStatus.degraded;
    return PerformanceStatus.poor;
  }

  ErrorStatus _calculateErrorStatus(SocialErrorMetrics errors) {
    final criticalCount = errors.overallStats.criticalErrorCount;
    final errorRate = errors.overallStats.errorRate;
    
    if (criticalCount > 0) return ErrorStatus.critical;
    if (errorRate > 10) return ErrorStatus.high;
    if (errorRate > 5) return ErrorStatus.medium;
    return ErrorStatus.low;
  }

  SecurityStatus _calculateSecurityStatus(SocialAbuseMetrics abuse) {
    final spamRate = abuse.spamDetection.spamRate;
    final harassmentCount = abuse.harassmentDetection.totalHarassmentDetected;
    
    if (spamRate > 0.1 || harassmentCount > 50) return SecurityStatus.high_risk;
    if (spamRate > 0.05 || harassmentCount > 20) return SecurityStatus.medium_risk;
    if (spamRate > 0.01 || harassmentCount > 5) return SecurityStatus.low_risk;
    return SecurityStatus.secure;
  }

  // Placeholder methods for detailed implementations
  Future<DashboardTrends> _calculateDashboardTrends(Duration period) async => DashboardTrends.empty();
  
  DashboardSummary _generateDashboardSummary(
    SocialHealthMetrics health,
    SocialPerformanceMetrics performance,
    SocialErrorMetrics errors,
    SocialAbuseMetrics abuse,
  ) => DashboardSummary(
    totalUsers: health.activeUsers.monthlyActiveUsers,
    totalPosts: 0, // Would calculate from health metrics
    averageResponseTime: performance.feedPerformance.averageLoadTime,
    errorRate: errors.overallStats.errorRate,
    securityScore: _calculateSecurityScore(abuse),
  );

  Future<List<CriticalAlert>> _getCriticalAlerts() async => [];
  Future<List<ActiveIncident>> _getActiveIncidents() async => [];
  Future<Map<String, double>> _calculateServiceUptime() async => {};
  Future<HealthInsights> _generateHealthInsights(Duration period) async => HealthInsights.empty();
  Future<PerformanceInsights> _generatePerformanceInsights(Duration period) async => PerformanceInsights.empty();
  Future<ErrorInsights> _generateErrorInsights(Duration period) async => ErrorInsights.empty();
  Future<SecurityInsights> _generateSecurityInsights(Duration period) async => SecurityInsights.empty();
  Future<CorrelationAnalysis> _performCorrelationAnalysis(Duration period) async => CorrelationAnalysis.empty();
  Future<PredictiveAnalytics> _generatePredictiveAnalytics(Duration period) async => PredictiveAnalytics.empty();
  Future<List<ActionableRecommendation>> _generateActionableRecommendations(Duration period) async => [];
  Future<String> _exportReport(MonitoringReport report, ReportFormat format) async => '';
  Future<void> _storeDashboardState(SocialMonitoringDashboard dashboard) async {}
  Future<void> _checkCriticalConditions(SocialMonitoringDashboard dashboard) async {}

  /// Dispose resources
  void dispose() {
    _dashboardUpdateTimer?.cancel();
  }
}

// Data models for monitoring dashboard
enum StatusLevel { excellent, good, warning, critical }
enum AlertType { health, performance, error, security }
enum AlertSeverity { info, warning, critical }
enum RecommendationCategory { userEngagement, performance, reliability, security }
enum RecommendationPriority { low, medium, high, urgent }
enum ReportFormat { json, csv, pdf }
enum HealthStatus { excellent, good, warning, critical }
enum PerformanceStatus { optimal, good, degraded, poor }
enum ErrorStatus { low, medium, high, critical }
enum SecurityStatus { secure, low_risk, medium_risk, high_risk }

class SocialMonitoringDashboard {
  final Duration period;
  final DateTime generatedAt;
  final SystemStatus systemStatus;
  final SocialHealthMetrics healthMetrics;
  final SocialPerformanceMetrics performanceMetrics;
  final SocialErrorMetrics errorMetrics;
  final SocialAbuseMetrics abuseMetrics;
  final List<DashboardAlert> alerts;
  final List<DashboardRecommendation> recommendations;
  final DashboardTrends trends;
  final DashboardSummary summary;

  const SocialMonitoringDashboard({
    required this.period,
    required this.generatedAt,
    required this.systemStatus,
    required this.healthMetrics,
    required this.performanceMetrics,
    required this.errorMetrics,
    required this.abuseMetrics,
    required this.alerts,
    required this.recommendations,
    required this.trends,
    required this.summary,
  });
}

class SystemStatus {
  final StatusLevel level;
  final double overallScore;
  final double healthScore;
  final double performanceScore;
  final double errorScore;
  final double securityScore;
  final DateTime lastUpdated;

  const SystemStatus({
    required this.level,
    required this.overallScore,
    required this.healthScore,
    required this.performanceScore,
    required this.errorScore,
    required this.securityScore,
    required this.lastUpdated,
  });
}

class DashboardAlert {
  final String id;
  final AlertType type;
  final AlertSeverity severity;
  final String title;
  final String message;
  final DateTime timestamp;
  final Map<String, dynamic> data;

  const DashboardAlert({
    required this.id,
    required this.type,
    required this.severity,
    required this.title,
    required this.message,
    required this.timestamp,
    required this.data,
  });
}

class DashboardRecommendation {
  final String id;
  final RecommendationCategory category;
  final RecommendationPriority priority;
  final String title;
  final String description;
  final List<String> actions;
  final String estimatedImpact;

  const DashboardRecommendation({
    required this.id,
    required this.category,
    required this.priority,
    required this.title,
    required this.description,
    required this.actions,
    required this.estimatedImpact,
  });
}

class RealTimeMonitoringStatus {
  final DateTime timestamp;
  final HealthStatus systemHealth;
  final PerformanceStatus performanceStatus;
  final ErrorStatus errorStatus;
  final SecurityStatus securityStatus;
  final List<CriticalAlert> criticalAlerts;
  final List<ActiveIncident> activeIncidents;
  final Map<String, double> serviceUptime;

  const RealTimeMonitoringStatus({
    required this.timestamp,
    required this.systemHealth,
    required this.performanceStatus,
    required this.errorStatus,
    required this.securityStatus,
    required this.criticalAlerts,
    required this.activeIncidents,
    required this.serviceUptime,
  });
}

class MonitoringInsights {
  final Duration period;
  final DateTime generatedAt;
  final HealthInsights healthInsights;
  final PerformanceInsights performanceInsights;
  final ErrorInsights errorInsights;
  final SecurityInsights securityInsights;
  final CorrelationAnalysis correlationAnalysis;
  final PredictiveAnalytics predictiveAnalytics;
  final List<ActionableRecommendation> actionableRecommendations;

  const MonitoringInsights({
    required this.period,
    required this.generatedAt,
    required this.healthInsights,
    required this.performanceInsights,
    required this.errorInsights,
    required this.securityInsights,
    required this.correlationAnalysis,
    required this.predictiveAnalytics,
    required this.actionableRecommendations,
  });
}

class MonitoringReport {
  final SocialMonitoringDashboard dashboard;
  final DateTime generatedAt;
  final ReportFormat format;
  final List<String> sections;

  const MonitoringReport({
    required this.dashboard,
    required this.generatedAt,
    required this.format,
    required this.sections,
  });
}

class DashboardSummary {
  final int totalUsers;
  final int totalPosts;
  final Duration averageResponseTime;
  final double errorRate;
  final double securityScore;

  const DashboardSummary({
    required this.totalUsers,
    required this.totalPosts,
    required this.averageResponseTime,
    required this.errorRate,
    required this.securityScore,
  });
}

// Additional data classes with empty factory methods
class DashboardTrends {
  static DashboardTrends empty() => const DashboardTrends();
  const DashboardTrends();
}

class CriticalAlert {
  final String id;
  final String message;
  final DateTime timestamp;

  const CriticalAlert({
    required this.id,
    required this.message,
    required this.timestamp,
  });
}

class ActiveIncident {
  final String id;
  final String type;
  final String status;
  final DateTime startTime;

  const ActiveIncident({
    required this.id,
    required this.type,
    required this.status,
    required this.startTime,
  });
}

class HealthInsights {
  static HealthInsights empty() => const HealthInsights();
  const HealthInsights();
}

class PerformanceInsights {
  static PerformanceInsights empty() => const PerformanceInsights();
  const PerformanceInsights();
}

class ErrorInsights {
  static ErrorInsights empty() => const ErrorInsights();
  const ErrorInsights();
}

class SecurityInsights {
  static SecurityInsights empty() => const SecurityInsights();
  const SecurityInsights();
}

class CorrelationAnalysis {
  static CorrelationAnalysis empty() => const CorrelationAnalysis();
  const CorrelationAnalysis();
}

class PredictiveAnalytics {
  static PredictiveAnalytics empty() => const PredictiveAnalytics();
  const PredictiveAnalytics();
}

class ActionableRecommendation {
  final String title;
  final String description;
  final List<String> actions;

  const ActionableRecommendation({
    required this.title,
    required this.description,
    required this.actions,
  });
}
