import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../../../core/widgets/loading_widget.dart';
import '../../providers/social_providers.dart';
import '../../controllers/social_feed_controller.dart';

class CommentWidget extends ConsumerStatefulWidget {
  final dynamic comment;
  final bool isReply;
  final bool showReplies;
  final int nestingLevel;
  final Function(dynamic)? onReply;
  final Function(dynamic)? onLike;
  final Function(dynamic)? onEdit;
  final Function(dynamic)? onDelete;
  final Function(dynamic)? onReport;

  const CommentWidget({
    super.key,
    required this.comment,
    this.isReply = false,
    this.showReplies = true,
    this.nestingLevel = 0,
    this.onReply,
    this.onLike,
    this.onEdit,
    this.onDelete,
    this.onReport,
  });

  @override
  ConsumerState<CommentWidget> createState() => _CommentWidgetState();
}

class _CommentWidgetState extends ConsumerState<CommentWidget>
    with SingleTickerProviderStateMixin {
  bool _showReplies = false;
  bool _isEditing = false;
  late TextEditingController _editController;
  late AnimationController _likeAnimationController;
  late Animation<double> _likeAnimation;

  @override
  void initState() {
    super.initState();
    _editController = TextEditingController(text: widget.comment.content);
    _showReplies = widget.showReplies;
    
    _likeAnimationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    
    _likeAnimation = Tween<double>(
      begin: 1.0,
      end: 1.3,
    ).animate(CurvedAnimation(
      parent: _likeAnimationController,
      curve: Curves.elasticOut,
    ));
  }

  @override
  void dispose() {
    _editController.dispose();
    _likeAnimationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isOwnComment = widget.comment.isOwnComment ?? false;
    final leftPadding = 16.0 + (widget.nestingLevel * 20.0);
    
    return Container(
      margin: EdgeInsets.only(
        left: leftPadding,
        right: 16,
        bottom: 8,
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Avatar
              CircleAvatar(
                radius: widget.isReply ? 12 : 16,
                backgroundImage: widget.comment.author?.avatar != null 
                  ? NetworkImage(widget.comment.author.avatar!)
                  : null,
                child: widget.comment.author?.avatar == null 
                  ? Text(
                      widget.comment.author?.name?[0]?.toUpperCase() ?? '?',
                      style: TextStyle(
                        fontSize: widget.isReply ? 10 : 12,
                        fontWeight: FontWeight.bold,
                      ),
                    )
                  : null,
              ),
              
              const SizedBox(width: 12),
              
              // Comment content
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Comment bubble
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 12,
                        vertical: 8,
                      ),
                      decoration: BoxDecoration(
                        color: theme.colorScheme.surfaceContainerHighest,
                        borderRadius: BorderRadius.circular(16),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // Author name
                          Row(
                            children: [
                              Text(
                                widget.comment.author?.name ?? 'Unknown',
                                style: theme.textTheme.bodySmall?.copyWith(
                                  fontWeight: FontWeight.bold,
                                  color: theme.colorScheme.primary,
                                ),
                              ),
                              if (widget.comment.author?.isVerified == true) ...[
                                const SizedBox(width: 4),
                                Icon(
                                  Icons.verified,
                                  size: 12,
                                  color: theme.colorScheme.primary,
                                ),
                              ],
                              if (widget.comment.isEdited == true) ...[
                                const SizedBox(width: 8),
                                Text(
                                  '(edited)',
                                  style: theme.textTheme.bodySmall?.copyWith(
                                    color: theme.colorScheme.onSurfaceVariant,
                                    fontStyle: FontStyle.italic,
                                  ),
                                ),
                              ],
                            ],
                          ),
                          
                          const SizedBox(height: 4),
                          
                          // Comment content
                          if (_isEditing)
                            _buildEditingField(theme)
                          else
                            _buildCommentContent(theme),
                        ],
                      ),
                    ),
                    
                    const SizedBox(height: 4),
                    
                    // Action buttons
                    _buildActionButtons(theme, isOwnComment),
                  ],
                ),
              ),
            ],
          ),
          
          // Replies section
          if (widget.showReplies && _showReplies)
            _buildRepliesSection(theme),
        ],
      ),
    );
  }

  Widget _buildCommentContent(ThemeData theme) {
    return RichText(
      text: TextSpan(
        style: theme.textTheme.bodyMedium,
        children: _parseCommentContent(widget.comment.content ?? ''),
      ),
    );
  }

  Widget _buildEditingField(ThemeData theme) {
    return TextField(
      controller: _editController,
      decoration: const InputDecoration(
        border: InputBorder.none,
        isDense: true,
        contentPadding: EdgeInsets.zero,
      ),
      style: theme.textTheme.bodyMedium,
      maxLines: null,
      autofocus: true,
      onSubmitted: (_) => _saveEdit(),
    );
  }

  Widget _buildActionButtons(ThemeData theme, bool isOwnComment) {
    return Padding(
      padding: const EdgeInsets.only(left: 12),
      child: Row(
        children: [
          // Time ago
          Text(
            _formatTimeAgo(widget.comment.createdAt),
            style: theme.textTheme.bodySmall?.copyWith(
              color: theme.colorScheme.onSurfaceVariant,
            ),
          ),
          
          const SizedBox(width: 16),
          
          // Like button
          GestureDetector(
            onTap: _handleLike,
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                AnimatedBuilder(
                  animation: _likeAnimation,
                  builder: (context, child) {
                    return Transform.scale(
                      scale: _likeAnimation.value,
                      child: Icon(
                        widget.comment.isLikedByUser == true
                          ? Icons.favorite
                          : Icons.favorite_border,
                        size: 16,
                        color: widget.comment.isLikedByUser == true
                          ? Colors.red
                          : theme.colorScheme.onSurfaceVariant,
                      ),
                    );
                  },
                ),
                if ((widget.comment.likeCount ?? 0) > 0) ...[
                  const SizedBox(width: 4),
                  Text(
                    '${widget.comment.likeCount}',
                    style: theme.textTheme.bodySmall?.copyWith(
                      color: theme.colorScheme.onSurfaceVariant,
                    ),
                  ),
                ],
              ],
            ),
          ),
          
          const SizedBox(width: 16),
          
          // Reply button
          if (widget.nestingLevel < 3)
            GestureDetector(
              onTap: () => widget.onReply?.call(widget.comment),
              child: Text(
                'Reply',
                style: theme.textTheme.bodySmall?.copyWith(
                  color: theme.colorScheme.onSurfaceVariant,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ),
          
          const Spacer(),
          
          // Menu button
          GestureDetector(
            onTap: () => _showCommentMenu(theme, isOwnComment),
            child: Icon(
              Icons.more_horiz,
              size: 16,
              color: theme.colorScheme.onSurfaceVariant,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildRepliesSection(ThemeData theme) {
    return Consumer(
      builder: (context, ref, child) {
        final repliesAsync = ref.watch(commentRepliesProvider(widget.comment.id));
        
        return repliesAsync.when(
          data: (replies) {
            if (replies.isEmpty) {
              return const SizedBox.shrink();
            }
            
            return Column(
              children: [
                const SizedBox(height: 8),
                ...replies.map((reply) {
                  return CommentWidget(
                    comment: reply,
                    isReply: true,
                    nestingLevel: widget.nestingLevel + 1,
                    showReplies: widget.nestingLevel < 2,
                    onReply: widget.onReply,
                    onLike: widget.onLike,
                    onEdit: widget.onEdit,
                    onDelete: widget.onDelete,
                    onReport: widget.onReport,
                  );
                }),
                
                // Load more replies button
                if (replies.length >= 5 && widget.comment.replyCount > replies.length)
                  Padding(
                    padding: const EdgeInsets.only(left: 40, top: 8),
                    child: GestureDetector(
                      onTap: () => _loadMoreReplies(),
                      child: Text(
                        'View ${widget.comment.replyCount - replies.length} more replies',
                        style: theme.textTheme.bodySmall?.copyWith(
                          color: theme.colorScheme.primary,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                  ),
              ],
            );
          },
          loading: () => const Padding(
            padding: EdgeInsets.only(left: 40, top: 8),
            child: LoadingWidget(),
          ),
          error: (error, stack) => const SizedBox.shrink(),
        );
      },
    );
  }

  List<TextSpan> _parseCommentContent(String content) {
    final List<TextSpan> spans = [];
    final RegExp mentionRegex = RegExp(r'@(\w+)');
    final RegExp hashtagRegex = RegExp(r'#(\w+)');
    
    int lastIndex = 0;
    
    // Find mentions and hashtags
    final allMatches = <RegExpMatch>[];
    allMatches.addAll(mentionRegex.allMatches(content));
    allMatches.addAll(hashtagRegex.allMatches(content));
    allMatches.sort((a, b) => a.start.compareTo(b.start));
    
    for (final match in allMatches) {
      // Add text before the match
      if (match.start > lastIndex) {
        spans.add(TextSpan(
          text: content.substring(lastIndex, match.start),
        ));
      }
      
      // Add the styled match
      final isMention = content.substring(match.start, match.start + 1) == '@';
      spans.add(TextSpan(
        text: match.group(0),
        style: TextStyle(
          color: isMention ? Colors.blue : Colors.purple,
          fontWeight: FontWeight.bold,
        ),
      ));
      
      lastIndex = match.end;
    }
    
    // Add remaining text
    if (lastIndex < content.length) {
      spans.add(TextSpan(
        text: content.substring(lastIndex),
      ));
    }
    
    return spans.isNotEmpty ? spans : [TextSpan(text: content)];
  }

  void _handleLike() {
    _likeAnimationController.forward().then((_) {
      _likeAnimationController.reverse();
    });
    widget.onLike?.call(widget.comment);
  }

  void _showCommentMenu(ThemeData theme, bool isOwnComment) {
    showModalBottomSheet(
      context: context,
      builder: (context) => Container(
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Text(
                  'Comment Options',
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const Spacer(),
                IconButton(
                  onPressed: () => Navigator.pop(context),
                  icon: const Icon(Icons.close),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            if (isOwnComment) ...[
              ListTile(
                leading: const Icon(Icons.edit),
                title: const Text('Edit comment'),
                onTap: () {
                  Navigator.pop(context);
                  _startEditing();
                },
              ),
              ListTile(
                leading: const Icon(Icons.delete),
                title: const Text('Delete comment'),
                onTap: () {
                  Navigator.pop(context);
                  widget.onDelete?.call(widget.comment);
                },
              ),
            ] else ...[
              ListTile(
                leading: const Icon(Icons.report),
                title: const Text('Report comment'),
                onTap: () {
                  Navigator.pop(context);
                  widget.onReport?.call(widget.comment);
                },
              ),
            ],
            
            ListTile(
              leading: const Icon(Icons.copy),
              title: const Text('Copy text'),
              onTap: () {
                Navigator.pop(context);
                _copyCommentText();
              },
            ),
          ],
        ),
      ),
    );
  }

  void _startEditing() {
    setState(() {
      _isEditing = true;
      _editController.text = widget.comment.content ?? '';
    });
  }

  void _saveEdit() {
    if (_editController.text.trim() != widget.comment.content) {
      widget.onEdit?.call({
        ...widget.comment.toJson(),
        'content': _editController.text.trim(),
      });
    }
    setState(() => _isEditing = false);
  }

  void _loadMoreReplies() {
    ref.read(socialFeedControllerProvider.notifier).loadMoreCommentReplies(
      widget.comment.id,
    );
  }

  void _copyCommentText() {
  }

  String _formatTimeAgo(DateTime? dateTime) {
    if (dateTime == null) return '';
    
    final now = DateTime.now();
    final difference = now.difference(dateTime);
    
    if (difference.inDays > 365) {
      return '${(difference.inDays / 365).floor()}y';
    } else if (difference.inDays > 30) {
      return '${(difference.inDays / 30).floor()}mo';
    } else if (difference.inDays > 0) {
      return '${difference.inDays}d';
    } else if (difference.inHours > 0) {
      return '${difference.inHours}h';
    } else if (difference.inMinutes > 0) {
      return '${difference.inMinutes}m';
    } else {
      return 'now';
    }
  }
}

/// Comment input widget
class CommentInputWidget extends ConsumerStatefulWidget {
  final String postId;
  final dynamic replyToComment;
  final VoidCallback? onCommentPosted;
  final VoidCallback? onCancelReply;

  const CommentInputWidget({
    super.key,
    required this.postId,
    this.replyToComment,
    this.onCommentPosted,
    this.onCancelReply,
  });

  @override
  ConsumerState<CommentInputWidget> createState() => _CommentInputWidgetState();
}

class _CommentInputWidgetState extends ConsumerState<CommentInputWidget> {
  final TextEditingController _controller = TextEditingController();
  final FocusNode _focusNode = FocusNode();
  bool _isPosting = false;

  @override
  void dispose() {
    _controller.dispose();
    _focusNode.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.colorScheme.surface,
        border: Border(
          top: BorderSide(
            color: theme.colorScheme.outline.withOpacity(0.2),
          ),
        ),
      ),
      child: Column(
        children: [
          // Reply indicator
          if (widget.replyToComment != null)
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(8),
              margin: const EdgeInsets.only(bottom: 8),
              decoration: BoxDecoration(
                color: theme.colorScheme.primaryContainer.withOpacity(0.3),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Row(
                children: [
                  Icon(
                    Icons.reply,
                    size: 16,
                    color: theme.colorScheme.primary,
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      'Replying to ${widget.replyToComment.author?.name ?? 'Unknown'}',
                      style: theme.textTheme.bodySmall?.copyWith(
                        color: theme.colorScheme.primary,
                      ),
                    ),
                  ),
                  GestureDetector(
                    onTap: widget.onCancelReply,
                    child: Icon(
                      Icons.close,
                      size: 16,
                      color: theme.colorScheme.primary,
                    ),
                  ),
                ],
              ),
            ),
          
          // Comment input
          Row(
            children: [
              Expanded(
                child: TextField(
                  controller: _controller,
                  focusNode: _focusNode,
                  decoration: InputDecoration(
                    hintText: widget.replyToComment != null 
                      ? 'Write a reply...' 
                      : 'Write a comment...',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(24),
                      borderSide: BorderSide.none,
                    ),
                    filled: true,
                    fillColor: theme.colorScheme.surfaceContainerHighest,
                    contentPadding: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 8,
                    ),
                    isDense: true,
                  ),
                  maxLines: null,
                  textCapitalization: TextCapitalization.sentences,
                ),
              ),
              
              const SizedBox(width: 8),
              
              // Send button
              Container(
                decoration: BoxDecoration(
                  color: theme.colorScheme.primary,
                  shape: BoxShape.circle,
                ),
                child: IconButton(
                  onPressed: _isPosting ? null : _postComment,
                  icon: _isPosting
                    ? SizedBox(
                        width: 20,
                        height: 20,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          valueColor: AlwaysStoppedAnimation<Color>(
                            theme.colorScheme.onPrimary,
                          ),
                        ),
                      )
                    : Icon(
                        Icons.send,
                        color: theme.colorScheme.onPrimary,
                      ),
                  padding: const EdgeInsets.all(8),
                  constraints: const BoxConstraints(
                    minWidth: 40,
                    minHeight: 40,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  void _postComment() async {
    final content = _controller.text.trim();
    if (content.isEmpty) return;

    setState(() => _isPosting = true);

    try {
      await ref.read(socialFeedControllerProvider.notifier).postComment(
        widget.postId,
        content,
        replyToId: widget.replyToComment?.id,
      );

      _controller.clear();
      widget.onCommentPosted?.call();
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to post comment: $e')),
      );
    } finally {
      setState(() => _isPosting = false);
    }
  }
}
