import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../../../core/widgets/custom_avatar.dart';
import '../../../../../themes/app_colors.dart';
import '../../../../../themes/app_text_styles.dart';
import '../../../../../utils/extensions/context_extensions.dart';
import '../../../../../core/models/user_model.dart';

/// A widget for displaying mutual friends as stacked avatars
/// with tap to view all functionality and profile navigation
class MutualFriendsWidget extends StatefulWidget {
  final List<UserModel> mutualFriends;
  final int maxVisible;
  final double size;
  final bool showNames;
  final bool showCount;
  final VoidCallback? onTap;
  final Function(UserModel)? onFriendTap;
  final EdgeInsetsGeometry? padding;
  final double spacing;

  const MutualFriendsWidget({
    super.key,
    required this.mutualFriends,
    this.maxVisible = 3,
    this.size = 32,
    this.showNames = false,
    this.showCount = true,
    this.onTap,
    this.onFriendTap,
    this.padding,
    this.spacing = -8,
  });

  @override
  State<MutualFriendsWidget> createState() => _MutualFriendsWidgetState();
}

class _MutualFriendsWidgetState extends State<MutualFriendsWidget>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _scaleAnimation;
  bool _isHovered = false;
  int? _hoveredIndex;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 200),
      vsync: this,
    );
    
    _scaleAnimation = Tween<double>(
      begin: 1.0,
      end: 1.1,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeInOut,
    ));
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  void _onEnter() {
    setState(() => _isHovered = true);
    _animationController.forward();
    HapticFeedback.lightImpact();
  }

  void _onExit() {
    setState(() {
      _isHovered = false;
      _hoveredIndex = null;
    });
    _animationController.reverse();
  }

  void _onAvatarEnter(int index) {
    setState(() => _hoveredIndex = index);
  }

  void _onAvatarExit() {
    setState(() => _hoveredIndex = null);
  }

  @override
  Widget build(BuildContext context) {
    if (widget.mutualFriends.isEmpty) {
      return const SizedBox.shrink();
    }

    return GestureDetector(
      onTap: widget.onTap,
      child: MouseRegion(
        onEnter: (_) => _onEnter(),
        onExit: (_) => _onExit(),
        child: AnimatedBuilder(
          animation: _scaleAnimation,
          builder: (context, child) {
            return Transform.scale(
              scale: _scaleAnimation.value,
              child: Container(
                padding: widget.padding,
                child: widget.showNames
                    ? _buildWithNames()
                    : _buildStackedAvatars(),
              ),
            );
          },
        ),
      ),
    );
  }

  Widget _buildStackedAvatars() {
    final visibleFriends = widget.mutualFriends.take(widget.maxVisible).toList();
    final remainingCount = widget.mutualFriends.length - widget.maxVisible;
    
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        SizedBox(
          height: widget.size,
          width: _calculateStackWidth(visibleFriends.length, remainingCount > 0),
          child: Stack(
            children: [
              // Stacked avatars
              ...visibleFriends.asMap().entries.map((entry) {
                final index = entry.key;
                final friend = entry.value;
                final leftOffset = index * (widget.size + widget.spacing);
                
                return Positioned(
                  left: leftOffset,
                  child: _buildAvatar(friend, index),
                );
              }),
              
              // "+X more" indicator
              if (remainingCount > 0)
                Positioned(
                  left: visibleFriends.length * (widget.size + widget.spacing),
                  child: _buildMoreIndicator(remainingCount),
                ),
            ],
          ),
        ),
        
        if (widget.showCount) ...[
          const SizedBox(width: 8),
          _buildFriendsCountText(),
        ],
      ],
    );
  }

  Widget _buildWithNames() {
    final visibleFriends = widget.mutualFriends.take(widget.maxVisible).toList();
    final remainingCount = widget.mutualFriends.length - widget.maxVisible;
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildStackedAvatars(),
        if (visibleFriends.isNotEmpty) ...[
          const SizedBox(height: 8),
          _buildNamesText(visibleFriends, remainingCount),
        ],
      ],
    );
  }

  Widget _buildAvatar(UserModel friend, int index) {
    final isHovered = _hoveredIndex == index;
    
    return MouseRegion(
      onEnter: (_) => _onAvatarEnter(index),
      onExit: (_) => _onAvatarExit(),
      child: GestureDetector(
        onTap: () => widget.onFriendTap?.call(friend),
        child: AnimatedContainer(
          duration: const Duration(milliseconds: 150),
          transform: Matrix4.identity()
            ..translate(0.0, isHovered ? -4.0 : 0.0)
            ..scale(isHovered ? 1.1 : 1.0),
          child: Container(
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              border: Border.all(
                color: Colors.white,
                width: 2,
              ),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 4,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Stack(
              children: [
                CustomAvatar(
                  imageUrl: friend.avatarUrl,
                  radius: widget.size / 2,
                ),
                
                // Hover overlay with name
                if (isHovered)
                  Positioned(
                    bottom: widget.size + 8,
                    left: -(friend.displayName.length * 3.5),
                    child: _buildNameTooltip(friend.displayName),
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildMoreIndicator(int count) {
    return MouseRegion(
      onEnter: (_) => _onAvatarEnter(-1),
      onExit: (_) => _onAvatarExit(),
      child: GestureDetector(
        onTap: widget.onTap,
        child: AnimatedContainer(
          duration: const Duration(milliseconds: 150),
          transform: Matrix4.identity()
            ..translate(0.0, _hoveredIndex == -1 ? -4.0 : 0.0)
            ..scale(_hoveredIndex == -1 ? 1.1 : 1.0),
          child: Container(
            width: widget.size,
            height: widget.size,
            decoration: BoxDecoration(
              color: AppColors.primary.withOpacity(0.1),
              shape: BoxShape.circle,
              border: Border.all(
                color: AppColors.primary.withOpacity(0.3),
                width: 2,
              ),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 4,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Center(
              child: Text(
                '+$count',
                style: AppTextStyles.bodySmall.copyWith(
                  color: AppColors.primary,
                  fontWeight: FontWeight.bold,
                  fontSize: widget.size * 0.3,
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildNameTooltip(String name) {
    return AnimatedOpacity(
      opacity: 1.0,
      duration: const Duration(milliseconds: 200),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
        decoration: BoxDecoration(
          color: Colors.black87,
          borderRadius: BorderRadius.circular(6),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.2),
              blurRadius: 4,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Text(
          name,
          style: AppTextStyles.bodySmall.copyWith(
            color: Colors.white,
            fontWeight: FontWeight.w500,
          ),
        ),
      ),
    );
  }

  Widget _buildFriendsCountText() {
    final count = widget.mutualFriends.length;
    final text = count == 1 
        ? '1 mutual friend' 
        : '$count mutual friends';
        
    return Text(
      text,
      style: AppTextStyles.bodySmall.copyWith(
        color: AppColors.textSecondary,
        fontWeight: FontWeight.w500,
      ),
    );
  }

  Widget _buildNamesText(List<UserModel> visibleFriends, int remainingCount) {
    final names = visibleFriends.map((f) => f.displayName).toList();
    String nameText;
    
    if (remainingCount > 0) {
      if (names.length == 1) {
        nameText = '${names[0]} and $remainingCount others';
      } else if (names.length == 2) {
        nameText = '${names[0]}, ${names[1]} and $remainingCount others';
      } else {
        nameText = '${names.take(2).join(', ')} and ${remainingCount + names.length - 2} others';
      }
    } else {
      if (names.length == 1) {
        nameText = names[0];
      } else if (names.length == 2) {
        nameText = '${names[0]} and ${names[1]}';
      } else {
        nameText = '${names.take(names.length - 1).join(', ')} and ${names.last}';
      }
    }
    
    return Text(
      nameText,
      style: AppTextStyles.bodySmall.copyWith(
        color: AppColors.textSecondary,
      ),
      maxLines: 2,
      overflow: TextOverflow.ellipsis,
    );
  }

  double _calculateStackWidth(int visibleCount, bool hasMore) {
    double width = widget.size; // First avatar
    width += (visibleCount - 1) * (widget.size + widget.spacing); // Additional avatars
    if (hasMore) {
      width += widget.size + widget.spacing; // More indicator
    }
    return width;
  }
}

/// Compact version for small spaces
class CompactMutualFriends extends StatelessWidget {
  final List<UserModel> mutualFriends;
  final VoidCallback? onTap;

  const CompactMutualFriends({
    super.key,
    required this.mutualFriends,
    this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return MutualFriendsWidget(
      mutualFriends: mutualFriends,
      maxVisible: 2,
      size: 24,
      showNames: false,
      showCount: true,
      onTap: onTap,
      spacing: -6,
    );
  }
}

/// Horizontal list version for detailed view
class MutualFriendsHorizontalList extends StatelessWidget {
  final List<UserModel> mutualFriends;
  final Function(UserModel)? onFriendTap;
  final ScrollPhysics? physics;

  const MutualFriendsHorizontalList({
    super.key,
    required this.mutualFriends,
    this.onFriendTap,
    this.physics,
  });

  @override
  Widget build(BuildContext context) {
    if (mutualFriends.isEmpty) {
      return const SizedBox.shrink();
    }

    return SizedBox(
      height: 80,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        physics: physics,
        itemCount: mutualFriends.length,
        itemBuilder: (context, index) {
          final friend = mutualFriends[index];
          
          return Container(
            width: 64,
            margin: const EdgeInsets.only(right: 12),
            child: GestureDetector(
              onTap: () => onFriendTap?.call(friend),
              child: Column(
                children: [
                  CustomAvatar(
                    imageUrl: friend.avatarUrl,
                    name: friend.displayName,
                    size: 48,
                  ),
                  const SizedBox(height: 4),
                  Text(
                    friend.displayName.split(' ')[0], // First name only
                    style: AppTextStyles.bodySmall.copyWith(
                      fontWeight: FontWeight.w500,
                    ),
                    textAlign: TextAlign.center,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}

/// Grid version for detailed mutual friends screen
class MutualFriendsGrid extends StatelessWidget {
  final List<UserModel> mutualFriends;
  final Function(UserModel)? onFriendTap;
  final int crossAxisCount;
  final double childAspectRatio;

  const MutualFriendsGrid({
    super.key,
    required this.mutualFriends,
    this.onFriendTap,
    this.crossAxisCount = 3,
    this.childAspectRatio = 0.8,
  });

  @override
  Widget build(BuildContext context) {
    if (mutualFriends.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.people_outline,
              size: 64,
              color: AppColors.textSecondary,
            ),
            const SizedBox(height: 16),
            Text(
              'No mutual friends',
              style: AppTextStyles.bodyLarge.copyWith(
                color: AppColors.textSecondary,
              ),
            ),
          ],
        ),
      );
    }

    return GridView.builder(
      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: crossAxisCount,
        childAspectRatio: childAspectRatio,
        crossAxisSpacing: 16,
        mainAxisSpacing: 16,
      ),
      itemCount: mutualFriends.length,
      itemBuilder: (context, index) {
        final friend = mutualFriends[index];
        
        return GestureDetector(
          onTap: () => onFriendTap?.call(friend),
          child: Container(
            decoration: BoxDecoration(
              color: Theme.of(context).cardColor,
              borderRadius: BorderRadius.circular(12),
              border: Border.all(
                color: AppColors.surfaceVariant.withOpacity(0.5),
              ),
            ),
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                CustomAvatar(
                  imageUrl: friend.avatarUrl,
                  name: friend.displayName,
                  size: 56,
                ),
                const SizedBox(height: 8),
                Text(
                  friend.displayName,
                  style: AppTextStyles.bodyMedium.copyWith(
                    fontWeight: FontWeight.w600,
                  ),
                  textAlign: TextAlign.center,
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
                const SizedBox(height: 4),
                Text(
                  '@${friend.username}',
                  style: AppTextStyles.bodySmall.copyWith(
                    color: AppColors.textSecondary,
                  ),
                  textAlign: TextAlign.center,
                  maxLines: 1,
                  overflow: TextOverflow.ellipsis,
                ),
              ],
            ),
          ),
        );
      },
    );
  }
}
