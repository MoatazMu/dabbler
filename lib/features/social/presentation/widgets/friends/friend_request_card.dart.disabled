import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../../../core/widgets/custom_avatar.dart';
import '../../../../../themes/app_colors.dart';
import '../../../../../themes/app_text_styles.dart';
import '../../../../../utils/formatters/time_formatter.dart';
import '../../../../../core/widgets/shimmer_loading.dart';
import '../../../data/models/friend_request_model.dart';
import 'mutual_friends_widget.dart';

/// A card widget for displaying friend requests with user info,
/// mutual friends, and accept/decline actions
class FriendRequestCard extends ConsumerStatefulWidget {
  final FriendRequestModel request;
  final VoidCallback? onAccept;
  final VoidCallback? onDecline;
  final VoidCallback? onViewProfile;
  final bool showMutualFriends;
  final bool showCommonSports;
  final bool showRequestMessage;
  final EdgeInsetsGeometry? margin;

  const FriendRequestCard({
    super.key,
    required this.request,
    this.onAccept,
    this.onDecline,
    this.onViewProfile,
    this.showMutualFriends = true,
    this.showCommonSports = true,
    this.showRequestMessage = true,
    this.margin,
  });

  @override
  ConsumerState<FriendRequestCard> createState() => _FriendRequestCardState();
}

class _FriendRequestCardState extends ConsumerState<FriendRequestCard>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _scaleAnimation;
  late Animation<Offset> _slideAnimation;
  bool _isProcessing = false;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    
    _scaleAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.elasticOut,
    ));

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 0.5),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeOut,
    ));

    _animationController.forward();
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  void _handleAccept() async {
    if (_isProcessing) return;
    
    setState(() => _isProcessing = true);
    HapticFeedback.mediumImpact();

    try {
      await _animateAction();
      widget.onAccept?.call();
      
      // Show success feedback
      _showSuccessSnackBar('Friend request accepted!');
    } catch (e) {
      _showErrorSnackBar('Failed to accept request. Please try again.');
    } finally {
      if (mounted) {
        setState(() => _isProcessing = false);
      }
    }
  }

  void _handleDecline() async {
    if (_isProcessing) return;
    
    setState(() => _isProcessing = true);
    HapticFeedback.lightImpact();

    try {
      await _animateAction();
      widget.onDecline?.call();
      
      // Show feedback
      _showSuccessSnackBar('Friend request declined');
    } catch (e) {
      _showErrorSnackBar('Failed to decline request. Please try again.');
    } finally {
      if (mounted) {
        setState(() => _isProcessing = false);
      }
    }
  }

  Future<void> _animateAction() async {
    await _animationController.reverse();
    await Future.delayed(const Duration(milliseconds: 100));
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
        margin: const EdgeInsets.all(16),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
    );
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
        margin: const EdgeInsets.all(16),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return AnimatedBuilder(
      animation: _animationController,
      builder: (context, child) {
        return SlideTransition(
          position: _slideAnimation,
          child: ScaleTransition(
            scale: _scaleAnimation,
            child: Container(
              margin: widget.margin ?? const EdgeInsets.symmetric(
                horizontal: 16,
                vertical: 8,
              ),
              decoration: BoxDecoration(
                color: theme.cardColor,
                borderRadius: BorderRadius.circular(16),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.08),
                    blurRadius: 12,
                    offset: const Offset(0, 4),
                  ),
                ],
                border: Border.all(
                  color: AppColors.primary.withOpacity(0.1),
                  width: 1,
                ),
              ),
              child: Material(
                color: Colors.transparent,
                child: InkWell(
                  borderRadius: BorderRadius.circular(16),
                  onTap: widget.onViewProfile,
                  child: Padding(
                    padding: const EdgeInsets.all(20),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        _buildHeader(),
                        if (widget.showRequestMessage && 
                            widget.request.message != null) ...[
                          const SizedBox(height: 12),
                          _buildRequestMessage(),
                        ],
                        if (widget.showMutualFriends) ...[
                          const SizedBox(height: 16),
                          _buildMutualFriends(),
                        ],
                        if (widget.showCommonSports) ...[
                          const SizedBox(height: 16),
                          _buildCommonSports(),
                        ],
                        const SizedBox(height: 20),
                        _buildActions(),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildHeader() {
    return Row(
      children: [
        Hero(
          tag: 'request_avatar_${widget.request.senderId}',
          child: Stack(
            children: [
              CustomAvatar(
                imageUrl: widget.request.senderAvatarUrl,
                name: widget.request.senderName,
                size: 64,
              ),
              if (widget.request.senderIsVerified)
                Positioned(
                  bottom: 2,
                  right: 2,
                  child: Container(
                    padding: const EdgeInsets.all(2),
                    decoration: BoxDecoration(
                      color: Theme.of(context).cardColor,
                      shape: BoxShape.circle,
                    ),
                    child: Icon(
                      Icons.verified,
                      size: 16,
                      color: Colors.blue,
                    ),
                  ),
                ),
            ],
          ),
        ),
        const SizedBox(width: 16),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Expanded(
                    child: Text(
                      widget.request.senderName,
                      style: AppTextStyles.headlineSmall.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 4),
              Text(
                '@${widget.request.senderUsername}',
                style: AppTextStyles.bodyMedium.copyWith(
                  color: AppColors.textSecondary,
                ),
              ),
              const SizedBox(height: 8),
              _buildTimeInfo(),
            ],
          ),
        ),
        _buildOptionsMenu(),
      ],
    );
  }

  Widget _buildTimeInfo() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: AppColors.surfaceVariant.withOpacity(0.5),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Text(
        TimeFormatter.formatRelativeTime(widget.request.createdAt),
        style: AppTextStyles.bodySmall.copyWith(
          color: AppColors.textSecondary,
          fontSize: 11,
        ),
      ),
    );
  }

  Widget _buildOptionsMenu() {
    return PopupMenuButton<String>(
      icon: Icon(
        Icons.more_vert,
        color: AppColors.textSecondary,
        size: 20,
      ),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      itemBuilder: (context) => [
        PopupMenuItem(
          value: 'profile',
          child: Row(
            children: [
              const Icon(Icons.person_outline),
              const SizedBox(width: 12),
              const Text('View Profile'),
            ],
          ),
        ),
        PopupMenuItem(
          value: 'report',
          child: Row(
            children: [
              const Icon(Icons.report_outlined, color: Colors.orange),
              const SizedBox(width: 12),
              Text(
                'Report User',
                style: TextStyle(color: Colors.orange),
              ),
            ],
          ),
        ),
        PopupMenuItem(
          value: 'block',
          child: Row(
            children: [
              const Icon(Icons.block, color: Colors.red),
              const SizedBox(width: 12),
              Text(
                'Block User',
                style: TextStyle(color: Colors.red),
              ),
            ],
          ),
        ),
      ],
      onSelected: (value) {
        switch (value) {
          case 'profile':
            widget.onViewProfile?.call();
            break;
          case 'report':
            _showReportDialog();
            break;
          case 'block':
            _showBlockDialog();
            break;
        }
      },
    );
  }

  Widget _buildRequestMessage() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: AppColors.surfaceVariant.withOpacity(0.3),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: AppColors.primary.withOpacity(0.1),
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                Icons.message_outlined,
                size: 16,
                color: AppColors.textSecondary,
              ),
              const SizedBox(width: 6),
              Text(
                'Message:',
                style: AppTextStyles.bodySmall.copyWith(
                  color: AppColors.textSecondary,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Text(
            widget.request.message!,
            style: AppTextStyles.bodyMedium,
            maxLines: 3,
            overflow: TextOverflow.ellipsis,
          ),
        ],
      ),
    );
  }

  Widget _buildMutualFriends() {
    return FutureBuilder<List<UserModel>>(
      future: _getMutualFriends(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.loading) {
          return ShimmerLoading(
            height: 40,
            width: double.infinity,
            borderRadius: BorderRadius.circular(12),
          );
        }

        if (!snapshot.hasData || snapshot.data!.isEmpty) {
          return const SizedBox.shrink();
        }

        final mutualFriends = snapshot.data!;
        
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.people_outline,
                  size: 16,
                  color: AppColors.textSecondary,
                ),
                const SizedBox(width: 6),
                Text(
                  'Mutual Friends',
                  style: AppTextStyles.bodySmall.copyWith(
                    color: AppColors.textSecondary,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            MutualFriendsWidget(
              mutualFriends: mutualFriends,
              maxVisible: 4,
              size: 32,
              showNames: true,
              onTap: () {
                Navigator.pushNamed(
                  context,
                  '/mutual-friends',
                  arguments: {
                    'userId': widget.request.senderId,
                    'userName': widget.request.senderName,
                  },
                );
              },
            ),
          ],
        );
      },
    );
  }

  Widget _buildCommonSports() {
    return FutureBuilder<List<String>>(
      future: _getCommonSports(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.loading) {
          return ShimmerLoading(
            height: 36,
            width: double.infinity,
            borderRadius: BorderRadius.circular(12),
          );
        }

        if (!snapshot.hasData || snapshot.data!.isEmpty) {
          return const SizedBox.shrink();
        }

        final commonSports = snapshot.data!;
        
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.sports_basketball_outlined,
                  size: 16,
                  color: AppColors.textSecondary,
                ),
                const SizedBox(width: 6),
                Text(
                  'Common Interests',
                  style: AppTextStyles.bodySmall.copyWith(
                    color: AppColors.textSecondary,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Wrap(
              spacing: 8,
              runSpacing: 4,
              children: commonSports.take(4).map((sport) {
                return Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 12,
                    vertical: 6,
                  ),
                  decoration: BoxDecoration(
                    color: AppColors.primary.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(
                      color: AppColors.primary.withOpacity(0.2),
                    ),
                  ),
                  child: Text(
                    sport,
                    style: AppTextStyles.bodySmall.copyWith(
                      color: AppColors.primary,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                );
              }).toList(),
            ),
          ],
        );
      },
    );
  }

  Widget _buildActions() {
    return Row(
      children: [
        Expanded(
          child: _buildActionButton(
            label: 'Decline',
            icon: Icons.close,
            onPressed: _isProcessing ? null : _handleDecline,
            backgroundColor: Colors.grey.shade100,
            foregroundColor: Colors.grey.shade700,
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          flex: 2,
          child: _buildActionButton(
            label: 'Accept',
            icon: Icons.check,
            onPressed: _isProcessing ? null : _handleAccept,
            backgroundColor: AppColors.primary,
            foregroundColor: Colors.white,
            isLoading: _isProcessing,
          ),
        ),
      ],
    );
  }

  Widget _buildActionButton({
    required String label,
    required IconData icon,
    required VoidCallback? onPressed,
    required Color backgroundColor,
    required Color foregroundColor,
    bool isLoading = false,
  }) {
    return SizedBox(
      height: 48,
      child: ElevatedButton.icon(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: backgroundColor,
          foregroundColor: foregroundColor,
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          padding: const EdgeInsets.symmetric(horizontal: 16),
        ),
        icon: isLoading
            ? SizedBox(
                width: 16,
                height: 16,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                  valueColor: AlwaysStoppedAnimation<Color>(foregroundColor),
                ),
              )
            : Icon(icon, size: 18),
        label: Text(
          label,
          style: AppTextStyles.labelLarge.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
      ),
    );
  }

  void _showReportDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Report User'),
        content: Text(
          'Report ${widget.request.senderName} for inappropriate behavior?',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              // Handle report
            },
            style: TextButton.styleFrom(
              foregroundColor: Colors.orange,
            ),
            child: const Text('Report'),
          ),
        ],
      ),
    );
  }

  void _showBlockDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Block User'),
        content: Text(
          'Block ${widget.request.senderName}? They won\'t be able to send you friend requests or messages.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              // Handle block
            },
            style: TextButton.styleFrom(
              foregroundColor: Colors.red,
            ),
            child: const Text('Block'),
          ),
        ],
      ),
    );
  }

  Future<List<UserModel>> _getMutualFriends() async {
    // In real implementation, fetch mutual friends from repository
    await Future.delayed(const Duration(milliseconds: 300));
    
    // Mock data
    return [
      UserModel(
        id: '1',
        username: 'alice_johnson',
        email: 'alice@example.com',
        displayName: 'Alice Johnson',
        avatarUrl: 'https://example.com/avatar1.jpg',
      ),
      UserModel(
        id: '2',
        username: 'bob_wilson',
        email: 'bob@example.com',
        displayName: 'Bob Wilson',
        avatarUrl: 'https://example.com/avatar2.jpg',
      ),
      UserModel(
        id: '3',
        username: 'charlie_brown',
        email: 'charlie@example.com',
        displayName: 'Charlie Brown',
        avatarUrl: 'https://example.com/avatar3.jpg',
      ),
    ];
  }

  Future<List<String>> _getCommonSports() async {
    // In real implementation, fetch common sports from repository
    await Future.delayed(const Duration(milliseconds: 200));
    
    // Mock data
    return ['Basketball', 'Tennis', 'Swimming', 'Running', 'Football'];
  }
}
