import 'package:flutter/material.dart';
import '../../../../../themes/app_colors.dart';
import '../../../../../themes/app_text_styles.dart';
import '../../../../../utils/formatters/time_formatter.dart';
import '../../../data/models/user_model.dart';

/// Status types for user activity
enum UserStatus {
  online,
  offline,
  away,
  busy,
  invisible,
}

/// Activity types for current user activity
enum ActivityType {
  playing,
  watching,
  listening,
  training,
  idle,
}

/// A reusable widget for displaying friend status indicators
/// including online/offline status, last seen time, and current activity
class FriendStatusIndicator extends StatefulWidget {
  final UserModel user;
  final double size;
  final bool showBorder;
  final bool showLastSeen;
  final bool showActivityText;
  final bool showStatusMessage;
  final bool animateStatusChanges;
  final EdgeInsetsGeometry? padding;
  final VoidCallback? onTap;

  const FriendStatusIndicator({
    super.key,
    required this.user,
    this.size = 12,
    this.showBorder = false,
    this.showLastSeen = false,
    this.showActivityText = false,
    this.showStatusMessage = false,
    this.animateStatusChanges = true,
    this.padding,
    this.onTap,
  });

  @override
  State<FriendStatusIndicator> createState() => _FriendStatusIndicatorState();
}

class _FriendStatusIndicatorState extends State<FriendStatusIndicator>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _scaleAnimation;
  late Animation<double> _opacityAnimation;
  
  UserStatus _currentStatus = UserStatus.offline;
  ActivityType? _currentActivity;

  @override
  void initState() {
    super.initState();
    _setupAnimations();
    _updateStatus();
  }

  @override
  void didUpdateWidget(FriendStatusIndicator oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (oldWidget.user.id != widget.user.id ||
        oldWidget.user.isOnline != widget.user.isOnline ||
        oldWidget.user.lastSeen != widget.user.lastSeen) {
      _updateStatus();
    }
  }

  void _setupAnimations() {
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 500),
      vsync: this,
    );
    
    _scaleAnimation = Tween<double>(
      begin: 0.8,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.elasticOut,
    ));

    _opacityAnimation = Tween<double>(
      begin: 0.5,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeInOut,
    ));

    // Start the animation loop for online status
    if (widget.animateStatusChanges) {
      _startStatusAnimation();
    }
  }

  void _startStatusAnimation() {
    if (_currentStatus == UserStatus.online) {
      _animationController.repeat(reverse: true);
    } else {
      _animationController.stop();
      _animationController.reset();
    }
  }

  void _updateStatus() {
    final oldStatus = _currentStatus;
    
    if (widget.user.isOnline) {
      if (widget.user.currentActivity != null) {
        final activityType = widget.user.currentActivity!['type'] as String?;
        switch (activityType) {
          case 'playing':
            _currentStatus = UserStatus.online;
            _currentActivity = ActivityType.playing;
            break;
          case 'busy':
            _currentStatus = UserStatus.busy;
            _currentActivity = null;
            break;
          case 'away':
            _currentStatus = UserStatus.away;
            _currentActivity = null;
            break;
          default:
            _currentStatus = UserStatus.online;
            _currentActivity = ActivityType.idle;
        }
      } else {
        _currentStatus = UserStatus.online;
        _currentActivity = null;
      }
    } else {
      _currentStatus = UserStatus.offline;
      _currentActivity = null;
    }

    if (widget.animateStatusChanges && oldStatus != _currentStatus) {
      _startStatusAnimation();
    }

    setState(() {});
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  Color _getStatusColor() {
    switch (_currentStatus) {
      case UserStatus.online:
        return Colors.green;
      case UserStatus.away:
        return Colors.orange;
      case UserStatus.busy:
        return Colors.red;
      case UserStatus.invisible:
        return Colors.grey;
      case UserStatus.offline:
        return Colors.grey.shade400;
    }
  }

  IconData? _getActivityIcon() {
    switch (_currentActivity) {
      case ActivityType.playing:
        return Icons.sports_basketball;
      case ActivityType.watching:
        return Icons.visibility;
      case ActivityType.listening:
        return Icons.headphones;
      case ActivityType.training:
        return Icons.fitness_center;
      case ActivityType.idle:
        return null;
      case null:
        return null;
    }
  }

  String _getStatusText() {
    if (_currentStatus == UserStatus.online) {
      if (_currentActivity == ActivityType.playing) {
        final activity = widget.user.currentActivity;
        if (activity != null && activity['description'] != null) {
          return 'Playing ${activity['description']}';
        }
        return 'Playing';
      } else if (_currentActivity != null) {
        return _currentActivity.toString().split('.').last.capitalize();
      }
      return 'Online';
    } else if (_currentStatus == UserStatus.away) {
      return 'Away';
    } else if (_currentStatus == UserStatus.busy) {
      return 'Busy';
    } else {
      return 'Last seen ${TimeFormatter.formatRelativeTime(widget.user.lastSeen)}';
    }
  }

  Widget _buildStatusDot() {
    Widget statusDot = Container(
      width: widget.size,
      height: widget.size,
      decoration: BoxDecoration(
        color: _getStatusColor(),
        shape: BoxShape.circle,
        border: widget.showBorder
            ? Border.all(
                color: Colors.white,
                width: widget.size * 0.15,
              )
            : null,
        boxShadow: widget.showBorder
            ? [
                BoxShadow(
                  color: Colors.black.withOpacity(0.2),
                  blurRadius: 4,
                  offset: const Offset(0, 2),
                ),
              ]
            : null,
      ),
      child: _getActivityIcon() != null
          ? Icon(
              _getActivityIcon(),
              size: widget.size * 0.6,
              color: Colors.white,
            )
          : null,
    );

    if (widget.animateStatusChanges && _currentStatus == UserStatus.online) {
      return AnimatedBuilder(
        animation: _animationController,
        builder: (context, child) {
          return Transform.scale(
            scale: _scaleAnimation.value,
            child: Opacity(
              opacity: _opacityAnimation.value,
              child: statusDot,
            ),
          );
        },
      );
    }

    return statusDot;
  }

  Widget _buildStatusWithText() {
    return GestureDetector(
      onTap: widget.onTap,
      child: Container(
        padding: widget.padding ?? const EdgeInsets.symmetric(
          horizontal: 8,
          vertical: 4,
        ),
        decoration: BoxDecoration(
          color: Theme.of(context).cardColor,
          borderRadius: BorderRadius.circular(16),
          border: Border.all(
            color: _getStatusColor().withOpacity(0.3),
            width: 1,
          ),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            _buildStatusDot(),
            const SizedBox(width: 8),
            Text(
              _getStatusText(),
              style: AppTextStyles.bodySmall.copyWith(
                color: _getStatusColor(),
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildExpandedStatus() {
    return GestureDetector(
      onTap: widget.onTap,
      child: Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: _getStatusColor().withOpacity(0.1),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: _getStatusColor().withOpacity(0.2),
          ),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                _buildStatusDot(),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    _getStatusText(),
                    style: AppTextStyles.bodyMedium.copyWith(
                      color: _getStatusColor(),
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ],
            ),
            if (widget.showStatusMessage &&
                widget.user.statusMessage != null) ...[
              const SizedBox(height: 8),
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.7),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Row(
                  children: [
                    Icon(
                      Icons.message,
                      size: 14,
                      color: AppColors.textSecondary,
                    ),
                    const SizedBox(width: 6),
                    Expanded(
                      child: Text(
                        widget.user.statusMessage!,
                        style: AppTextStyles.bodySmall.copyWith(
                          color: AppColors.textSecondary,
                        ),
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (widget.showLastSeen || widget.showActivityText || widget.showStatusMessage) {
      return widget.showStatusMessage
          ? _buildExpandedStatus()
          : _buildStatusWithText();
    }

    return GestureDetector(
      onTap: widget.onTap,
      child: _buildStatusDot(),
    );
  }
}

/// Extension to capitalize strings
extension StringExtension on String {
  String capitalize() {
    return "${this[0].toUpperCase()}${substring(1)}";
  }
}

/// Compact version for small spaces
class CompactStatusIndicator extends StatelessWidget {
  final UserModel user;
  final double size;
  final VoidCallback? onTap;

  const CompactStatusIndicator({
    super.key,
    required this.user,
    this.size = 8,
    this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return FriendStatusIndicator(
      user: user,
      size: size,
      showBorder: false,
      animateStatusChanges: false,
      onTap: onTap,
    );
  }
}

/// List tile version with full status information
class StatusListTile extends StatelessWidget {
  final UserModel user;
  final VoidCallback? onTap;
  final Widget? leading;
  final Widget? trailing;

  const StatusListTile({
    super.key,
    required this.user,
    this.onTap,
    this.leading,
    this.trailing,
  });

  @override
  Widget build(BuildContext context) {
    return ListTile(
      leading: leading,
      title: Text(
        user.displayName,
        style: AppTextStyles.bodyMedium.copyWith(
          fontWeight: FontWeight.w600,
        ),
      ),
      subtitle: FriendStatusIndicator(
        user: user,
        showLastSeen: true,
        showActivityText: true,
        animateStatusChanges: true,
        size: 12,
      ),
      trailing: trailing,
      onTap: onTap,
    );
  }
}

/// Floating status widget for overlays
class FloatingStatusWidget extends StatefulWidget {
  final UserModel user;
  final VoidCallback? onClose;

  const FloatingStatusWidget({
    super.key,
    required this.user,
    this.onClose,
  });

  @override
  State<FloatingStatusWidget> createState() => _FloatingStatusWidgetState();
}

class _FloatingStatusWidgetState extends State<FloatingStatusWidget>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;
  late Animation<double> _opacityAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    
    _scaleAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.elasticOut,
    ));

    _opacityAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeIn,
    ));

    _controller.forward();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  void _handleClose() async {
    await _controller.reverse();
    widget.onClose?.call();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _controller,
      builder: (context, child) {
        return ScaleTransition(
          scale: _scaleAnimation,
          child: FadeTransition(
            opacity: _opacityAnimation,
            child: Material(
              elevation: 8,
              borderRadius: BorderRadius.circular(16),
              child: Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Theme.of(context).cardColor,
                  borderRadius: BorderRadius.circular(16),
                ),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Row(
                      children: [
                        Expanded(
                          child: Text(
                            '${widget.user.displayName}\'s Status',
                            style: AppTextStyles.titleMedium.copyWith(
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                        IconButton(
                          onPressed: _handleClose,
                          icon: const Icon(Icons.close),
                          iconSize: 20,
                        ),
                      ],
                    ),
                    const SizedBox(height: 12),
                    FriendStatusIndicator(
                      user: widget.user,
                      showLastSeen: true,
                      showActivityText: true,
                      showStatusMessage: true,
                      animateStatusChanges: true,
                      size: 16,
                    ),
                  ],
                ),
              ),
            ),
          ),
        );
      },
    );
  }
}
