import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../../../core/widgets/custom_avatar.dart';
import '../../../../../themes/app_colors.dart';
import '../../../../../themes/app_text_styles.dart';
import '../../../../../utils/extensions/context_extensions.dart';
import '../../../../../core/widgets/shimmer_loading.dart';
import '../../controllers/friends_controller.dart';
import '../../providers/social_providers.dart';
import '../../../../../core/models/user_model.dart';

/// A card widget for displaying friend suggestions with user info,
/// suggestion reason, mutual connections, and add/dismiss actions
class FriendSuggestionCard extends ConsumerStatefulWidget {
  final UserModel suggestedUser;
  final String? suggestionReason;
  final VoidCallback? onAddFriend;
  final VoidCallback? onDismiss;
  final VoidCallback? onViewProfile;
  final bool showMutualConnections;
  final bool showCommonInterests;
  final bool showSuggestionReason;
  final EdgeInsetsGeometry? margin;

  const FriendSuggestionCard({
    super.key,
    required this.suggestedUser,
    this.suggestionReason,
    this.onAddFriend,
    this.onDismiss,
    this.onViewProfile,
    this.showMutualConnections = true,
    this.showCommonInterests = true,
    this.showSuggestionReason = true,
    this.margin,
  });

  @override
  ConsumerState<FriendSuggestionCard> createState() => _FriendSuggestionCardState();
}

class _FriendSuggestionCardState extends ConsumerState<FriendSuggestionCard>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _scaleAnimation;
  late Animation<double> _opacityAnimation;
  late Animation<Offset> _slideAnimation;
  bool _isProcessing = false;
  bool _isDismissed = false;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    
    _scaleAnimation = Tween<double>(
      begin: 0.8,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.elasticOut,
    ));

    _opacityAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeIn,
    ));

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 0.3),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeOut,
    ));

    _animationController.forward();
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  void _handleAddFriend() async {
    if (_isProcessing || _isDismissed) return;
    
    setState(() => _isProcessing = true);
    HapticFeedback.mediumImpact();

    try {
      await _animateSuccess();
      widget.onAddFriend?.call();
      
      _showSuccessSnackBar('Friend request sent!');
    } catch (e) {
      _showErrorSnackBar('Failed to send friend request. Please try again.');
      setState(() => _isProcessing = false);
    }
  }

  void _handleDismiss() async {
    if (_isProcessing || _isDismissed) return;
    
    setState(() {
      _isProcessing = true;
      _isDismissed = true;
    });
    HapticFeedback.lightImpact();

    try {
      await _animateDismiss();
      widget.onDismiss?.call();
    } catch (e) {
      _showErrorSnackBar('Failed to dismiss suggestion. Please try again.');
      setState(() {
        _isProcessing = false;
        _isDismissed = false;
      });
      _animationController.forward();
    }
  }

  Future<void> _animateSuccess() async {
    await _animationController.reverse();
    await Future.delayed(const Duration(milliseconds: 200));
  }

  Future<void> _animateDismiss() async {
    await _animationController.reverse();
    await Future.delayed(const Duration(milliseconds: 100));
  }

  void _showSuccessSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            Icon(Icons.check_circle, color: Colors.white, size: 20),
            const SizedBox(width: 8),
            Text(message),
          ],
        ),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
        margin: const EdgeInsets.all(16),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
    );
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            Icon(Icons.error, color: Colors.white, size: 20),
            const SizedBox(width: 8),
            Text(message),
          ],
        ),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
        margin: const EdgeInsets.all(16),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    if (_isDismissed && _animationController.isDismissed) {
      return const SizedBox.shrink();
    }
    
    return AnimatedBuilder(
      animation: _animationController,
      builder: (context, child) {
        return SlideTransition(
          position: _slideAnimation,
          child: ScaleTransition(
            scale: _scaleAnimation,
            child: FadeTransition(
              opacity: _opacityAnimation,
              child: Container(
                margin: widget.margin ?? const EdgeInsets.symmetric(
                  horizontal: 16,
                  vertical: 8,
                ),
                decoration: BoxDecoration(
                  color: theme.cardColor,
                  borderRadius: BorderRadius.circular(16),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.06),
                      blurRadius: 10,
                      offset: const Offset(0, 2),
                    ),
                  ],
                  border: Border.all(
                    color: AppColors.surfaceVariant.withOpacity(0.5),
                    width: 1,
                  ),
                ),
                child: Material(
                  color: Colors.transparent,
                  child: InkWell(
                    borderRadius: BorderRadius.circular(16),
                    onTap: widget.onViewProfile,
                    child: Padding(
                      padding: const EdgeInsets.all(20),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          _buildHeader(),
                          if (widget.showSuggestionReason &&
                              widget.suggestionReason != null) ...[
                            const SizedBox(height: 12),
                            _buildSuggestionReason(),
                          ],
                          const SizedBox(height: 16),
                          _buildMiniProfilePreview(),
                          if (widget.showMutualConnections) ...[
                            const SizedBox(height: 16),
                            _buildMutualConnections(),
                          ],
                          if (widget.showCommonInterests) ...[
                            const SizedBox(height: 16),
                            _buildCommonInterests(),
                          ],
                          const SizedBox(height: 20),
                          _buildActions(),
                        ],
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildHeader() {
    return Row(
      children: [
        Hero(
          tag: 'suggestion_avatar_${widget.suggestedUser.id}',
          child: Stack(
            children: [
              CustomAvatar(
                imageUrl: widget.suggestedUser.profileImageUrl,
                radius: 30,
              ),
              if (widget.suggestedUser.isVerified ?? false)
                Positioned(
                  bottom: 0,
                  right: 0,
                  child: Container(
                    padding: const EdgeInsets.all(2),
                    decoration: BoxDecoration(
                      color: Theme.of(context).cardColor,
                      shape: BoxShape.circle,
                    ),
                    child: Icon(
                      Icons.verified,
                      size: 16,
                      color: Colors.blue,
                    ),
                  ),
                ),
            ],
          ),
        ),
        const SizedBox(width: 16),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                widget.suggestedUser.displayName,
                style: AppTextStyles.titleLarge.copyWith(
                  fontWeight: FontWeight.bold,
                ),
                overflow: TextOverflow.ellipsis,
              ),
              const SizedBox(height: 4),
              Text(
                '@${widget.suggestedUser.username}',
                style: AppTextStyles.bodyMedium.copyWith(
                  color: AppColors.textSecondary,
                ),
              ),
              if (widget.suggestedUser.location != null) ...[
                const SizedBox(height: 4),
                Row(
                  children: [
                    Icon(
                      Icons.location_on_outlined,
                      size: 14,
                      color: AppColors.textSecondary,
                    ),
                    const SizedBox(width: 4),
                    Expanded(
                      child: Text(
                        widget.suggestedUser.location!,
                        style: AppTextStyles.bodySmall.copyWith(
                          color: AppColors.textSecondary,
                        ),
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                  ],
                ),
              ],
            ],
          ),
        ),
        _buildOptionsMenu(),
      ],
    );
  }

  Widget _buildOptionsMenu() {
    return PopupMenuButton<String>(
      icon: Icon(
        Icons.more_vert,
        color: AppColors.textSecondary,
        size: 20,
      ),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      itemBuilder: (context) => [
        PopupMenuItem(
          value: 'profile',
          child: Row(
            children: [
              const Icon(Icons.person_outline),
              const SizedBox(width: 12),
              const Text('View Full Profile'),
            ],
          ),
        ),
        PopupMenuItem(
          value: 'not_interested',
          child: Row(
            children: [
              const Icon(Icons.not_interested_outlined),
              const SizedBox(width: 12),
              const Text('Not Interested'),
            ],
          ),
        ),
        PopupMenuItem(
          value: 'report',
          child: Row(
            children: [
              const Icon(Icons.report_outlined, color: Colors.orange),
              const SizedBox(width: 12),
              Text(
                'Report User',
                style: TextStyle(color: Colors.orange),
              ),
            ],
          ),
        ),
      ],
      onSelected: (value) {
        switch (value) {
          case 'profile':
            widget.onViewProfile?.call();
            break;
          case 'not_interested':
            _handleDismiss();
            break;
          case 'report':
            _showReportDialog();
            break;
        }
      },
    );
  }

  Widget _buildSuggestionReason() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      decoration: BoxDecoration(
        color: AppColors.primary.withOpacity(0.1),
        borderRadius: BorderRadius.circular(20),
        border: Border.all(
          color: AppColors.primary.withOpacity(0.2),
        ),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            Icons.auto_awesome,
            size: 16,
            color: AppColors.primary,
          ),
          const SizedBox(width: 6),
          Flexible(
            child: Text(
              widget.suggestionReason!,
              style: AppTextStyles.bodySmall.copyWith(
                color: AppColors.primary,
                fontWeight: FontWeight.w500,
              ),
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMiniProfilePreview() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: AppColors.surfaceVariant.withOpacity(0.3),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (widget.suggestedUser.bio != null) ...[
            Text(
              widget.suggestedUser.bio!,
              style: AppTextStyles.bodyMedium,
              maxLines: 2,
              overflow: TextOverflow.ellipsis,
            ),
            const SizedBox(height: 12),
          ],
          _buildProfileStats(),
        ],
      ),
    );
  }

  Widget _buildProfileStats() {
    return Row(
      children: [
        _buildStatItem(
          icon: Icons.people_outline,
          value: widget.suggestedUser.friendsCount?.toString() ?? '0',
          label: 'Friends',
        ),
        const SizedBox(width: 20),
        _buildStatItem(
          icon: Icons.sports_basketball_outlined,
          value: widget.suggestedUser.sportsCount?.toString() ?? '0',
          label: 'Sports',
        ),
        const SizedBox(width: 20),
        _buildStatItem(
          icon: Icons.emoji_events_outlined,
          value: widget.suggestedUser.achievementsCount?.toString() ?? '0',
          label: 'Achievements',
        ),
      ],
    );
  }

  Widget _buildStatItem({
    required IconData icon,
    required String value,
    required String label,
  }) {
    return Column(
      children: [
        Icon(
          icon,
          size: 20,
          color: AppColors.textSecondary,
        ),
        const SizedBox(height: 4),
        Text(
          value,
          style: AppTextStyles.titleSmall.copyWith(
            fontWeight: FontWeight.bold,
          ),
        ),
        Text(
          label,
          style: AppTextStyles.bodySmall.copyWith(
            color: AppColors.textSecondary,
          ),
        ),
      ],
    );
  }

  Widget _buildMutualConnections() {
    return FutureBuilder<List<UserModel>>(
      future: _getMutualConnections(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.loading) {
          return ShimmerLoading(
            height: 40,
            width: double.infinity,
            borderRadius: BorderRadius.circular(12),
          );
        }

        if (!snapshot.hasData || snapshot.data!.isEmpty) {
          return const SizedBox.shrink();
        }

        final mutualConnections = snapshot.data!;
        
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.people_outline,
                  size: 16,
                  color: AppColors.textSecondary,
                ),
                const SizedBox(width: 6),
                Text(
                  'Mutual Connections',
                  style: AppTextStyles.bodySmall.copyWith(
                    color: AppColors.textSecondary,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            MutualFriendsWidget(
              mutualFriends: mutualConnections,
              maxVisible: 3,
              size: 32,
              showNames: true,
              onTap: () {
                Navigator.pushNamed(
                  context,
                  '/mutual-connections',
                  arguments: {
                    'userId': widget.suggestedUser.id,
                    'userName': widget.suggestedUser.displayName,
                  },
                );
              },
            ),
          ],
        );
      },
    );
  }

  Widget _buildCommonInterests() {
    return FutureBuilder<List<String>>(
      future: _getCommonInterests(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.loading) {
          return ShimmerLoading(
            height: 32,
            width: double.infinity,
            borderRadius: BorderRadius.circular(12),
          );
        }

        if (!snapshot.hasData || snapshot.data!.isEmpty) {
          return const SizedBox.shrink();
        }

        final commonInterests = snapshot.data!;
        
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.favorite_outline,
                  size: 16,
                  color: AppColors.textSecondary,
                ),
                const SizedBox(width: 6),
                Text(
                  'Common Interests',
                  style: AppTextStyles.bodySmall.copyWith(
                    color: AppColors.textSecondary,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Wrap(
              spacing: 8,
              runSpacing: 4,
              children: commonInterests.take(3).map((interest) {
                return Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 12,
                    vertical: 6,
                  ),
                  decoration: BoxDecoration(
                    color: Colors.green.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(
                      color: Colors.green.withOpacity(0.2),
                    ),
                  ),
                  child: Text(
                    interest,
                    style: AppTextStyles.bodySmall.copyWith(
                      color: Colors.green.shade700,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                );
              }).toList(),
            ),
          ],
        );
      },
    );
  }

  Widget _buildActions() {
    return Row(
      children: [
        Expanded(
          child: _buildActionButton(
            label: 'Dismiss',
            icon: Icons.close,
            onPressed: (_isProcessing && !_isDismissed) ? null : _handleDismiss,
            backgroundColor: Colors.grey.shade100,
            foregroundColor: Colors.grey.shade700,
            isSecondary: true,
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          flex: 2,
          child: _buildActionButton(
            label: 'Add Friend',
            icon: Icons.person_add,
            onPressed: _isProcessing ? null : _handleAddFriend,
            backgroundColor: AppColors.primary,
            foregroundColor: Colors.white,
            isLoading: _isProcessing && !_isDismissed,
          ),
        ),
      ],
    );
  }

  Widget _buildActionButton({
    required String label,
    required IconData icon,
    required VoidCallback? onPressed,
    required Color backgroundColor,
    required Color foregroundColor,
    bool isLoading = false,
    bool isSecondary = false,
  }) {
    return SizedBox(
      height: 48,
      child: ElevatedButton.icon(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: backgroundColor,
          foregroundColor: foregroundColor,
          elevation: isSecondary ? 0 : 2,
          shadowColor: isSecondary ? null : AppColors.primary.withOpacity(0.3),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
            side: isSecondary ? BorderSide(
              color: Colors.grey.shade300,
              width: 1,
            ) : BorderSide.none,
          ),
          padding: const EdgeInsets.symmetric(horizontal: 16),
        ),
        icon: isLoading
            ? SizedBox(
                width: 16,
                height: 16,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                  valueColor: AlwaysStoppedAnimation<Color>(foregroundColor),
                ),
              )
            : Icon(icon, size: 18),
        label: Text(
          label,
          style: AppTextStyles.labelLarge.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
      ),
    );
  }

  void _showReportDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Report User'),
        content: Text(
          'Report ${widget.suggestedUser.displayName} for inappropriate behavior?',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              // Handle report
              _showSuccessSnackBar('User reported. Thank you for your feedback.');
            },
            style: TextButton.styleFrom(
              foregroundColor: Colors.orange,
            ),
            child: const Text('Report'),
          ),
        ],
      ),
    );
  }

  Future<List<UserModel>> _getMutualConnections() async {
    // In real implementation, fetch mutual connections from repository
    await Future.delayed(const Duration(milliseconds: 400));
    
    // Mock data
    return [
      UserModel(
        id: '1',
        username: 'sarah_jones',
        email: 'sarah@example.com',
        displayName: 'Sarah Jones',
        avatarUrl: 'https://example.com/avatar1.jpg',
      ),
      UserModel(
        id: '2',
        username: 'mike_davis',
        email: 'mike@example.com',
        displayName: 'Mike Davis',
        avatarUrl: 'https://example.com/avatar2.jpg',
      ),
    ];
  }

  Future<List<String>> _getCommonInterests() async {
    // In real implementation, fetch common interests from repository
    await Future.delayed(const Duration(milliseconds: 300));
    
    // Mock data
    return ['Photography', 'Hiking', 'Music', 'Cooking', 'Travel'];
  }
}
