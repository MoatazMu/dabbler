import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';

import '../../controllers/profile_edit_controller.dart';
import '../../providers/profile_providers.dart';
import '../../../domain/entities/user_profile.dart';

class EditProfileScreen extends ConsumerStatefulWidget {
  final UserProfile? initialProfile;

  const EditProfileScreen({
    super.key,
    this.initialProfile,
  });

  @override
  ConsumerState<EditProfileScreen> createState() => _EditProfileScreenState();
}

class _EditProfileScreenState extends ConsumerState<EditProfileScreen> 
    with TickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  
  final _scrollController = ScrollController();
  final _imagePicker = ImagePicker();

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _animationController, curve: Curves.easeInOut),
    );
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 0.05),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _animationController, 
      curve: Curves.easeOutCubic,
    ));

    _animationController.forward();
    
    // Initialize form with existing profile data
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (widget.initialProfile != null) {
        ref.read(profileEditControllerProvider.notifier)
            .initialize(widget.initialProfile);
      }
    });
  }

  @override
  void dispose() {
    _animationController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  Future<bool> _onWillPop() async {
    final editState = ref.read(profileEditControllerProvider);
    
    if (editState.hasChanges) {
      final shouldPop = await showDialog<bool>(
        context: context,
        builder: (context) => AlertDialog(
          title: const Text('Unsaved Changes'),
          content: const Text(
            'You have unsaved changes. Are you sure you want to leave?'
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: const Text('Cancel'),
            ),
            TextButton(
              onPressed: () => Navigator.of(context).pop(true),
              style: TextButton.styleFrom(
                foregroundColor: Colors.red,
              ),
              child: const Text('Discard'),
            ),
          ],
        ),
      );
      return shouldPop ?? false;
    }
    return true;
  }

  @override
  Widget build(BuildContext context) {
    final editState = ref.watch(profileEditControllerProvider);
    final controller = ref.read(profileEditControllerProvider.notifier);

    return PopScope(
      canPop: !editState.hasChanges,
      onPopInvoked: (bool didPop) async {
        if (!didPop) {
          final shouldPop = await _onWillPop();
          if (shouldPop && context.mounted) {
            context.pop();
          }
        }
      },
      child: Scaffold(
        body: FadeTransition(
          opacity: _fadeAnimation,
          child: SlideTransition(
            position: _slideAnimation,
            child: CustomScrollView(
              controller: _scrollController,
              physics: const BouncingScrollPhysics(),
              slivers: [
                _buildAppBar(context, editState, controller),
                SliverToBoxAdapter(
                  child: Form(
                    key: controller.formKey,
                    child: Column(
                      children: [
                        _buildAvatarSection(context, editState, controller),
                        _buildBasicInformationSection(context, editState, controller),
                        _buildAboutMeSection(context, editState, controller),
                        _buildContactInformationSection(context, editState, controller),
                        _buildLocationSection(context, editState, controller),
                        const SizedBox(height: 100), // Bottom spacing for save button
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
        floatingActionButton: editState.hasChanges
            ? FloatingActionButton.extended(
                onPressed: editState.isSaving ? null : () => _saveProfile(controller),
                icon: editState.isSaving
                    ? const SizedBox(
                        width: 20,
                        height: 20,
                        child: CircularProgressIndicator(strokeWidth: 2),
                      )
                    : const Icon(Icons.save),
                label: Text(editState.isSaving ? 'Saving...' : 'Save Changes'),
              )
            : null,
      ),
    );
  }

  Widget _buildAppBar(BuildContext context, ProfileEditState editState, ProfileEditController controller) {
    return SliverAppBar(
      expandedHeight: 120,
      floating: false,
      pinned: true,
      elevation: 0,
      backgroundColor: Theme.of(context).scaffoldBackgroundColor,
      leading: IconButton(
        onPressed: () async {
          final shouldPop = await _onWillPop();
          if (shouldPop && context.mounted) {
            context.pop();
          }
        },
        icon: const Icon(Icons.arrow_back),
      ),
      flexibleSpace: FlexibleSpaceBar(
        title: Text(
          'Edit Profile',
          style: Theme.of(context).textTheme.headlineSmall?.copyWith(
            fontWeight: FontWeight.bold,
          ),
        ),
        centerTitle: false,
        titlePadding: const EdgeInsets.only(left: 56, bottom: 16),
      ),
      actions: [
        if (editState.hasChanges)
          TextButton(
            onPressed: editState.isSaving ? null : () => _saveProfile(controller),
            child: editState.isSaving 
                ? const SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(strokeWidth: 2),
                  )
                : const Text('Save'),
          ),
        const SizedBox(width: 8),
      ],
    );
  }

  Widget _buildAvatarSection(BuildContext context, ProfileEditState editState, ProfileEditController controller) {
    final avatarUrl = editState.formData['avatarUrl'] as String?;
    
    return Container(
      margin: const EdgeInsets.all(20),
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        color: Theme.of(context).cardColor,
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        children: [
          Text(
            'Profile Photo',
            style: Theme.of(context).textTheme.titleLarge?.copyWith(
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 20),
          Stack(
            children: [
              Hero(
                tag: 'profile-avatar-edit',
                child: CircleAvatar(
                  radius: 60,
                  backgroundColor: Theme.of(context).primaryColor.withOpacity(0.1),
                  backgroundImage: avatarUrl != null 
                      ? (avatarUrl.startsWith('http') 
                          ? NetworkImage(avatarUrl) 
                          : FileImage(File(avatarUrl))) as ImageProvider
                      : null,
                  child: avatarUrl == null 
                      ? Icon(
                          Icons.person,
                          size: 60,
                          color: Theme.of(context).primaryColor,
                        )
                      : null,
                ),
              ),
              if (editState.isUploadingAvatar)
                Positioned.fill(
                  child: CircleAvatar(
                    radius: 60,
                    backgroundColor: Colors.black54,
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const CircularProgressIndicator(
                          valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          '${(editState.avatarUploadProgress * 100).toInt()}%',
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 12,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              Positioned(
                bottom: 0,
                right: 0,
                child: GestureDetector(
                  onTap: () => _showImagePickerOptions(context, controller),
                  child: Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Theme.of(context).primaryColor,
                      shape: BoxShape.circle,
                      border: Border.all(
                        color: Theme.of(context).scaffoldBackgroundColor,
                        width: 3,
                      ),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.2),
                          blurRadius: 4,
                          offset: const Offset(0, 2),
                        ),
                      ],
                    ),
                    child: const Icon(
                      Icons.camera_alt,
                      color: Colors.white,
                      size: 20,
                    ),
                  ),
                ),
              ),
            ],
          ),
          if (editState.avatarUploadError != null) ...[
            const SizedBox(height: 12),
            Text(
              editState.avatarUploadError!,
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                color: Colors.red,
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildBasicInformationSection(BuildContext context, ProfileEditState editState, ProfileEditController controller) {
    return _buildSection(
      context,
      'Basic Information',
      [
        Row(
          children: [
            Expanded(
              child: _buildTextField(
                context,
                'First Name',
                'firstName',
                controller.getController('firstName')!,
                validator: (value) {
                  if (value?.isEmpty ?? true) {
                    return 'First name is required';
                  }
                  return null;
                },
                onChanged: (value) => controller.updateField('firstName', value),
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: _buildTextField(
                context,
                'Last Name',
                'lastName',
                controller.getController('lastName')!,
                validator: (value) {
                  if (value?.isEmpty ?? true) {
                    return 'Last name is required';
                  }
                  return null;
                },
                onChanged: (value) => controller.updateField('lastName', value),
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        _buildTextField(
          context,
          'Display Name',
          'displayName',
          controller.getController('displayName')!,
          validator: (value) {
            if (value?.isEmpty ?? true) {
              return 'Display name is required';
            }
            return null;
          },
          onChanged: (value) => controller.updateField('displayName', value),
        ),
        const SizedBox(height: 16),
        _buildDropdownField(
          context,
          'Gender',
          editState.formData['gender'] as String?,
          ['Male', 'Female', 'Other', 'Prefer not to say'],
          onChanged: (value) => controller.updateField('gender', value),
        ),
        const SizedBox(height: 16),
        _buildDateField(
          context,
          'Date of Birth',
          editState.formData['dateOfBirth'] as DateTime?,
          onChanged: (date) => controller.updateDateOfBirth(date),
        ),
      ],
    );
  }

  Widget _buildAboutMeSection(BuildContext context, ProfileEditState editState, ProfileEditController controller) {
    return _buildSection(
      context,
      'About Me',
      [
        _buildTextField(
          context,
          'Bio',
          'bio',
          controller.getController('bio')!,
          maxLines: 4,
          maxLength: 500,
          hintText: 'Tell others about yourself, your interests, and what you\'re looking for in a game partner...',
          onChanged: (value) => controller.updateField('bio', value),
        ),
      ],
    );
  }

  Widget _buildContactInformationSection(BuildContext context, ProfileEditState editState, ProfileEditController controller) {
    return _buildSection(
      context,
      'Contact Information',
      [
        _buildTextField(
          context,
          'Email',
          'email',
          controller.getController('email')!,
          keyboardType: TextInputType.emailAddress,
          validator: (value) {
            if (value?.isEmpty ?? true) {
              return 'Email is required';
            }
            if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value!)) {
              return 'Please enter a valid email address';
            }
            return null;
          },
          onChanged: (value) => controller.updateField('email', value),
        ),
        const SizedBox(height: 16),
        _buildTextField(
          context,
          'Phone Number',
          'phoneNumber',
          controller.getController('phoneNumber')!,
          keyboardType: TextInputType.phone,
          inputFormatters: [
            FilteringTextInputFormatter.allow(RegExp(r'[0-9+\-\s\(\)]')),
          ],
          validator: (value) {
            if (value?.isNotEmpty == true) {
              if (!RegExp(r'^[\+]?[0-9\-\s\(\)]{10,}$').hasMatch(value!)) {
                return 'Please enter a valid phone number';
              }
            }
            return null;
          },
          onChanged: (value) => controller.updateField('phoneNumber', value),
        ),
      ],
    );
  }

  Widget _buildLocationSection(BuildContext context, ProfileEditState editState, ProfileEditController controller) {
    return _buildSection(
      context,
      'Location',
      [
        _buildTextField(
          context,
          'Location',
          'location',
          controller.getController('location')!,
          hintText: 'City, State/Province, Country',
          suffixIcon: Icons.location_on_outlined,
          onChanged: (value) => controller.updateField('location', value),
        ),
        const SizedBox(height: 12),
        Text(
          'Your location helps us find nearby games and players',
          style: Theme.of(context).textTheme.bodySmall?.copyWith(
            color: Colors.grey[600],
          ),
        ),
      ],
    );
  }

  Widget _buildSection(BuildContext context, String title, List<Widget> children) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Theme.of(context).cardColor,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: Theme.of(context).textTheme.titleLarge?.copyWith(
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 20),
          ...children,
        ],
      ),
    );
  }

  Widget _buildTextField(
    BuildContext context,
    String label,
    String fieldName,
    TextEditingController textController, {
    int maxLines = 1,
    int? maxLength,
    TextInputType? keyboardType,
    String? hintText,
    IconData? suffixIcon,
    List<TextInputFormatter>? inputFormatters,
    String? Function(String?)? validator,
    Function(String)? onChanged,
  }) {
    final editState = ref.watch(profileEditControllerProvider);
    final fieldError = editState.fieldErrors[fieldName];

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: Theme.of(context).textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 8),
        TextFormField(
          controller: textController,
          maxLines: maxLines,
          maxLength: maxLength,
          keyboardType: keyboardType,
          inputFormatters: inputFormatters,
          validator: validator,
          decoration: InputDecoration(
            hintText: hintText,
            suffixIcon: suffixIcon != null ? Icon(suffixIcon) : null,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: Colors.grey[300]!),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: Colors.grey[300]!),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: Theme.of(context).primaryColor),
            ),
            errorBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: const BorderSide(color: Colors.red),
            ),
            focusedErrorBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: const BorderSide(color: Colors.red),
            ),
            contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            errorText: fieldError,
          ),
          onChanged: onChanged,
        ),
      ],
    );
  }

  Widget _buildDropdownField(
    BuildContext context,
    String label,
    String? value,
    List<String> options, {
    Function(String?)? onChanged,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: Theme.of(context).textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 8),
        DropdownButtonFormField<String>(
          value: value,
          items: options.map((option) {
            return DropdownMenuItem(
              value: option,
              child: Text(option),
            );
          }).toList(),
          onChanged: onChanged,
          decoration: InputDecoration(
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: Colors.grey[300]!),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: Colors.grey[300]!),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: Theme.of(context).primaryColor),
            ),
            contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
          ),
        ),
      ],
    );
  }

  Widget _buildDateField(
    BuildContext context,
    String label,
    DateTime? value, {
    Function(DateTime?)? onChanged,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: Theme.of(context).textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 8),
        InkWell(
          onTap: () => _selectDate(context, value, onChanged),
          child: Container(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            decoration: BoxDecoration(
              border: Border.all(color: Colors.grey[300]!),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Row(
              children: [
                Expanded(
                  child: Text(
                    value != null 
                        ? '${value.day}/${value.month}/${value.year}'
                        : 'Select date of birth',
                    style: TextStyle(
                      color: value != null ? null : Colors.grey[600],
                    ),
                  ),
                ),
                const Icon(Icons.calendar_today, size: 20),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Future<void> _selectDate(
    BuildContext context,
    DateTime? currentDate,
    Function(DateTime?)? onChanged,
  ) async {
    final selectedDate = await showDatePicker(
      context: context,
      initialDate: currentDate ?? DateTime.now().subtract(const Duration(days: 365 * 25)),
      firstDate: DateTime.now().subtract(const Duration(days: 365 * 100)),
      lastDate: DateTime.now().subtract(const Duration(days: 365 * 13)),
    );
    
    if (selectedDate != null && onChanged != null) {
      onChanged(selectedDate);
    }
  }

  void _showImagePickerOptions(BuildContext context, ProfileEditController controller) {
    showModalBottomSheet(
      context: context,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) {
        return SafeArea(
          child: Padding(
            padding: const EdgeInsets.all(20),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Text(
                  'Profile Photo',
                  style: Theme.of(context).textTheme.titleLarge?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 20),
                Row(
                  children: [
                    Expanded(
                      child: _buildImageSourceButton(
                        context,
                        'Camera',
                        Icons.camera_alt,
                        () => _pickImage(ImageSource.camera, controller),
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: _buildImageSourceButton(
                        context,
                        'Gallery',
                        Icons.photo_library,
                        () => _pickImage(ImageSource.gallery, controller),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                    controller.updateField('avatarUrl', null);
                  },
                  style: TextButton.styleFrom(
                    foregroundColor: Colors.red,
                  ),
                  child: const Text('Remove Photo'),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildImageSourceButton(
    BuildContext context,
    String title,
    IconData icon,
    VoidCallback onTap,
  ) {
    return Material(
      color: Theme.of(context).primaryColor.withOpacity(0.1),
      borderRadius: BorderRadius.circular(12),
      child: InkWell(
        onTap: () {
          Navigator.of(context).pop();
          onTap();
        },
        borderRadius: BorderRadius.circular(12),
        child: Container(
          padding: const EdgeInsets.all(20),
          child: Column(
            children: [
              Icon(
                icon,
                size: 32,
                color: Theme.of(context).primaryColor,
              ),
              const SizedBox(height: 8),
              Text(
                title,
                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Future<void> _pickImage(ImageSource source, ProfileEditController controller) async {
    try {
      final XFile? image = await _imagePicker.pickImage(
        source: source,
        maxWidth: 1024,
        maxHeight: 1024,
        imageQuality: 85,
      );

      if (image != null) {
        controller.uploadAvatar(File(image.path));
      }
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error picking image: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  Future<void> _saveProfile(ProfileEditController controller) async {
    if (!controller.formKey.currentState!.validate()) {
      return;
    }

    try {
      final success = await controller.saveChanges();
      
      if (success && context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Profile updated successfully'),
            backgroundColor: Colors.green,
          ),
        );
        context.pop();
      }
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error saving profile: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
}
