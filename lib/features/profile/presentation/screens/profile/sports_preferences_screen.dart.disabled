import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';

import '../../controllers/sports_profile_controller.dart';
import '../../providers/profile_providers.dart';
import '../../../domain/entities/sports_profile.dart';

class SportsPreferencesScreen extends ConsumerStatefulWidget {
  const SportsPreferencesScreen({super.key});

  @override
  ConsumerState<SportsPreferencesScreen> createState() => _SportsPreferencesScreenState();
}

class _SportsPreferencesScreenState extends ConsumerState<SportsPreferencesScreen>
    with TickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';
  bool _isReordering = false;

  final List<Map<String, dynamic>> _availableSports = [
    {'name': 'Basketball', 'icon': Icons.sports_basketball, 'category': 'Team Sports'},
    {'name': 'Football', 'icon': Icons.sports_soccer, 'category': 'Team Sports'},
    {'name': 'Tennis', 'icon': Icons.sports_tennis, 'category': 'Individual Sports'},
    {'name': 'Volleyball', 'icon': Icons.sports_volleyball, 'category': 'Team Sports'},
    {'name': 'Baseball', 'icon': Icons.sports_baseball, 'category': 'Team Sports'},
    {'name': 'Hockey', 'icon': Icons.sports_hockey, 'category': 'Team Sports'},
    {'name': 'Golf', 'icon': Icons.sports_golf, 'category': 'Individual Sports'},
    {'name': 'Swimming', 'icon': Icons.pool, 'category': 'Individual Sports'},
    {'name': 'Running', 'icon': Icons.directions_run, 'category': 'Individual Sports'},
    {'name': 'Cycling', 'icon': Icons.directions_bike, 'category': 'Individual Sports'},
    {'name': 'Boxing', 'icon': Icons.sports_mma, 'category': 'Combat Sports'},
    {'name': 'Martial Arts', 'icon': Icons.sports_kabaddi, 'category': 'Combat Sports'},
    {'name': 'Badminton', 'icon': Icons.sports_tennis, 'category': 'Individual Sports'},
    {'name': 'Table Tennis', 'icon': Icons.sports_tennis, 'category': 'Individual Sports'},
    {'name': 'Cricket', 'icon': Icons.sports_cricket, 'category': 'Team Sports'},
    {'name': 'Rugby', 'icon': Icons.sports_rugby, 'category': 'Team Sports'},
  ];

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _animationController, curve: Curves.easeInOut),
    );
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 0.1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _animationController, 
      curve: Curves.easeOutCubic,
    ));

    _animationController.forward();
    
    // Load sports profiles
    WidgetsBinding.instance.addPostFrameCallback((_) {
      ref.read(sportsProfileControllerProvider.notifier)
          .loadSportsProfiles('current-user-id');
    });
  }

  @override
  void dispose() {
    _animationController.dispose();
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final sportsState = ref.watch(sportsProfileControllerProvider);
    final controller = ref.read(sportsProfileControllerProvider.notifier);
    
    return Scaffold(
      body: FadeTransition(
        opacity: _fadeAnimation,
        child: SlideTransition(
          position: _slideAnimation,
          child: CustomScrollView(
            physics: const BouncingScrollPhysics(),
            slivers: [
              _buildAppBar(context),
              SliverToBoxAdapter(
                child: Column(
                  children: [
                    _buildSearchBar(context),
                    _buildMySportsSection(context, sportsState, controller),
                    _buildAvailableSportsSection(context, sportsState, controller),
                    const SizedBox(height: 100), // Bottom spacing
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildAppBar(BuildContext context) {
    return SliverAppBar(
      expandedHeight: 120,
      floating: false,
      pinned: true,
      elevation: 0,
      backgroundColor: Theme.of(context).scaffoldBackgroundColor,
      leading: IconButton(
        onPressed: () => context.pop(),
        icon: const Icon(Icons.arrow_back),
      ),
      flexibleSpace: FlexibleSpaceBar(
        title: Text(
          'Sports Preferences',
          style: Theme.of(context).textTheme.headlineSmall?.copyWith(
            fontWeight: FontWeight.bold,
          ),
        ),
        centerTitle: false,
        titlePadding: const EdgeInsets.only(left: 56, bottom: 16),
      ),
      actions: [
        IconButton(
          onPressed: () {
            setState(() {
              _isReordering = !_isReordering;
            });
          },
          icon: Icon(_isReordering ? Icons.done : Icons.reorder),
          tooltip: _isReordering ? 'Done Reordering' : 'Reorder Sports',
        ),
        const SizedBox(width: 8),
      ],
    );
  }

  Widget _buildSearchBar(BuildContext context) {
    return Container(
      margin: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Theme.of(context).cardColor,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: TextField(
        controller: _searchController,
        decoration: InputDecoration(
          hintText: 'Search sports...',
          prefixIcon: const Icon(Icons.search),
          suffixIcon: _searchQuery.isNotEmpty
              ? IconButton(
                  onPressed: () {
                    _searchController.clear();
                    setState(() {
                      _searchQuery = '';
                    });
                  },
                  icon: const Icon(Icons.clear),
                )
              : null,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(16),
            borderSide: BorderSide.none,
          ),
          filled: true,
          fillColor: Theme.of(context).cardColor,
          contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        ),
        onChanged: (value) {
          setState(() {
            _searchQuery = value;
          });
        },
      ),
    );
  }

  Widget _buildMySportsSection(
    BuildContext context,
    SportsProfileState sportsState,
    SportsProfileController controller,
  ) {
    if (sportsState.profiles.isEmpty) {
      return Container(
        margin: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
        padding: const EdgeInsets.all(24),
        decoration: BoxDecoration(
          color: Theme.of(context).cardColor,
          borderRadius: BorderRadius.circular(16),
          border: Border.all(
            color: Theme.of(context).primaryColor.withOpacity(0.2),
            width: 1,
          ),
        ),
        child: Column(
          children: [
            Icon(
              Icons.sports,
              color: Theme.of(context).primaryColor,
              size: 48,
            ),
            const SizedBox(height: 16),
            Text(
              'No Sports Added Yet',
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Add sports below to start building your profile',
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                color: Colors.grey[600],
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      );
    }

    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Text(
                'My Sports',
                style: Theme.of(context).textTheme.titleLarge?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
              ),
              const Spacer(),
              if (_isReordering)
                Text(
                  'Drag to reorder',
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: Colors.grey[600],
                  ),
                ),
            ],
          ),
          const SizedBox(height: 16),
          _isReordering
              ? _buildReorderableSportsList(sportsState.profiles, controller)
              : _buildSportsList(sportsState.profiles, controller),
        ],
      ),
    );
  }

  Widget _buildSportsList(List<SportProfile> profiles, SportsProfileController controller) {
    return ListView.separated(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      itemCount: profiles.length,
      separatorBuilder: (context, index) => const SizedBox(height: 12),
      itemBuilder: (context, index) {
        final sport = profiles[index];
        return _buildSportCard(sport, controller, isExpanded: false);
      },
    );
  }

  Widget _buildReorderableSportsList(List<SportProfile> profiles, SportsProfileController controller) {
    return ReorderableListView.builder(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      itemCount: profiles.length,
      onReorder: (oldIndex, newIndex) {
        // Handle reordering logic here
        setState(() {
          if (newIndex > oldIndex) {
            newIndex -= 1;
          }
          // This would need to be implemented in the controller
          // controller.reorderSports(oldIndex, newIndex);
        });
      },
      itemBuilder: (context, index) {
        final sport = profiles[index];
        return _buildSportCard(
          sport,
          controller,
          key: ValueKey(sport.sportId),
          isReorderable: true,
        );
      },
    );
  }

  Widget _buildSportCard(
    SportProfile sport,
    SportsProfileController controller, {
    Key? key,
    bool isExpanded = false,
    bool isReorderable = false,
  }) {
    return Container(
      key: key,
      decoration: BoxDecoration(
        color: Theme.of(context).cardColor,
        borderRadius: BorderRadius.circular(16),
        border: sport.isPrimarySport
            ? Border.all(color: Colors.orange, width: 2)
            : Border.all(color: Colors.grey[200]!),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: ExpansionTile(
        leading: Stack(
          children: [
            Container(
              width: 48,
              height: 48,
              decoration: BoxDecoration(
                color: Theme.of(context).primaryColor.withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Icon(
                _getSportIcon(sport.sportName),
                color: Theme.of(context).primaryColor,
                size: 24,
              ),
            ),
            if (sport.isPrimarySport)
              Positioned(
                top: -2,
                right: -2,
                child: Container(
                  padding: const EdgeInsets.all(2),
                  decoration: const BoxDecoration(
                    color: Colors.orange,
                    shape: BoxShape.circle,
                  ),
                  child: const Icon(
                    Icons.star,
                    color: Colors.white,
                    size: 12,
                  ),
                ),
              ),
          ],
        ),
        title: Text(
          sport.sportName,
          style: Theme.of(context).textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        subtitle: Text(
          '${sport.getSkillLevelName()} • ${sport.yearsPlaying} years',
          style: Theme.of(context).textTheme.bodySmall?.copyWith(
            color: Colors.grey[600],
          ),
        ),
        trailing: isReorderable
            ? const Icon(Icons.drag_handle)
            : PopupMenuButton<String>(
                onSelected: (value) => _handleSportAction(value, sport, controller),
                itemBuilder: (context) => [
                  const PopupMenuItem(
                    value: 'edit',
                    child: Row(
                      children: [
                        Icon(Icons.edit, size: 18),
                        SizedBox(width: 8),
                        Text('Edit'),
                      ],
                    ),
                  ),
                  PopupMenuItem(
                    value: 'primary',
                    child: Row(
                      children: [
                        Icon(
                          sport.isPrimarySport ? Icons.star : Icons.star_border,
                          size: 18,
                          color: Colors.orange,
                        ),
                        const SizedBox(width: 8),
                        Text(sport.isPrimarySport ? 'Remove Primary' : 'Set Primary'),
                      ],
                    ),
                  ),
                  const PopupMenuItem(
                    value: 'remove',
                    child: Row(
                      children: [
                        Icon(Icons.delete, size: 18, color: Colors.red),
                        SizedBox(width: 8),
                        Text('Remove', style: TextStyle(color: Colors.red)),
                      ],
                    ),
                  ),
                ],
              ),
        children: [
          Padding(
            padding: const EdgeInsets.fromLTRB(16, 0, 16, 16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                if (sport.preferredPositions.isNotEmpty) ...[
                  Text(
                    'Preferred Positions:',
                    style: Theme.of(context).textTheme.titleSmall?.copyWith(
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Wrap(
                    spacing: 8,
                    runSpacing: 4,
                    children: sport.preferredPositions.map((position) {
                      return Container(
                        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                        decoration: BoxDecoration(
                          color: Theme.of(context).primaryColor.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Text(
                          position,
                          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                            color: Theme.of(context).primaryColor,
                          ),
                        ),
                      );
                    }).toList(),
                  ),
                  const SizedBox(height: 12),
                ],
                if (sport.achievements.isNotEmpty) ...[
                  Text(
                    'Achievements:',
                    style: Theme.of(context).textTheme.titleSmall?.copyWith(
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                  const SizedBox(height: 4),
                  ...sport.achievements.map((achievement) {
                    return Padding(
                      padding: const EdgeInsets.only(bottom: 4),
                      child: Row(
                        children: [
                          Icon(
                            Icons.emoji_events,
                            size: 16,
                            color: Colors.orange,
                          ),
                          const SizedBox(width: 8),
                          Text(
                            achievement,
                            style: Theme.of(context).textTheme.bodySmall,
                          ),
                        ],
                      ),
                    );
                  }),
                ],
                const SizedBox(height: 8),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      'Games: ${sport.gamesPlayed}',
                      style: Theme.of(context).textTheme.bodySmall?.copyWith(
                        color: Colors.grey[600],
                      ),
                    ),
                    Text(
                      'Rating: ${sport.averageRating.toStringAsFixed(1)}',
                      style: Theme.of(context).textTheme.bodySmall?.copyWith(
                        color: Colors.grey[600],
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildAvailableSportsSection(
    BuildContext context,
    SportsProfileState sportsState,
    SportsProfileController controller,
  ) {
    final availableSports = _getAvailableSports(sportsState.profiles);
    final filteredSports = _getFilteredSports(availableSports);

    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Add Sports',
            style: Theme.of(context).textTheme.titleLarge?.copyWith(
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 16),
          if (filteredSports.isEmpty)
            Container(
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                color: Theme.of(context).cardColor,
                borderRadius: BorderRadius.circular(16),
              ),
              child: Center(
                child: Text(
                  _searchQuery.isNotEmpty
                      ? 'No sports found matching "$_searchQuery"'
                      : 'All available sports have been added',
                  style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                    color: Colors.grey[600],
                  ),
                ),
              ),
            )
          else
            GridView.builder(
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                mainAxisSpacing: 12,
                crossAxisSpacing: 12,
                childAspectRatio: 1.2,
              ),
              itemCount: filteredSports.length,
              itemBuilder: (context, index) {
                final sport = filteredSports[index];
                return _buildAvailableSportCard(sport, controller);
              },
            ),
        ],
      ),
    );
  }

  Widget _buildAvailableSportCard(
    Map<String, dynamic> sport,
    SportsProfileController controller,
  ) {
    return Container(
      decoration: BoxDecoration(
        color: Theme.of(context).cardColor,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: Colors.grey[200]!),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: () => _addSport(sport, controller),
          borderRadius: BorderRadius.circular(16),
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(
                  sport['icon'] as IconData,
                  size: 36,
                  color: Theme.of(context).primaryColor,
                ),
                const SizedBox(height: 12),
                Text(
                  sport['name'] as String,
                  style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.w600,
                  ),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 4),
                Text(
                  sport['category'] as String,
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: Colors.grey[600],
                  ),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 8),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Theme.of(context).primaryColor.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Icon(
                    Icons.add,
                    size: 16,
                    color: Theme.of(context).primaryColor,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  List<Map<String, dynamic>> _getAvailableSports(List<SportProfile> userSports) {
    final userSportNames = userSports.map((s) => s.sportName.toLowerCase()).toSet();
    return _availableSports
        .where((sport) => !userSportNames.contains(sport['name'].toString().toLowerCase()))
        .toList();
  }

  List<Map<String, dynamic>> _getFilteredSports(List<Map<String, dynamic>> sports) {
    if (_searchQuery.isEmpty) return sports;
    
    return sports.where((sport) {
      final name = sport['name'].toString().toLowerCase();
      final category = sport['category'].toString().toLowerCase();
      final query = _searchQuery.toLowerCase();
      return name.contains(query) || category.contains(query);
    }).toList();
  }

  IconData _getSportIcon(String sportName) {
    final sport = _availableSports.firstWhere(
      (s) => s['name'].toString().toLowerCase() == sportName.toLowerCase(),
      orElse: () => {'icon': Icons.sports},
    );
    return sport['icon'] as IconData;
  }

  void _handleSportAction(String action, SportProfile sport, SportsProfileController controller) {
    switch (action) {
      case 'edit':
        context.push('/profile/skill-level-setup', extra: sport);
        break;
      case 'primary':
        // Toggle primary sport
        controller.togglePrimarySport(sport.sportId, !sport.isPrimarySport);
        break;
      case 'remove':
        _confirmRemoveSport(sport, controller);
        break;
    }
  }

  void _confirmRemoveSport(SportProfile sport, SportsProfileController controller) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Remove Sport'),
        content: Text('Are you sure you want to remove ${sport.sportName} from your profile?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              controller.deleteSportsProfile(sport.sportId);
            },
            style: TextButton.styleFrom(
              foregroundColor: Colors.red,
            ),
            child: const Text('Remove'),
          ),
        ],
      ),
    );
  }

  void _addSport(Map<String, dynamic> sport, SportsProfileController controller) {
    context.push(
      '/profile/skill-level-setup',
      extra: {
        'sportName': sport['name'] as String,
        'isNew': true,
      },
    );
  }
}
