import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:dabbler/features/profile/domain/usecases/get_profile_usecase.dart';
// import 'package:dabbler/features/profile/presentation/providers/profile_providers_new.dart';

// Domain layer imports
import '../../domain/entities/user_profile.dart';
import '../../domain/entities/user_settings.dart';
import '../../domain/entities/user_preferences.dart';
import '../../domain/entities/privacy_settings.dart';
import '../../domain/entities/sports_profile.dart';

// Controller imports
import '../controllers/profile_controller.dart';
import '../controllers/profile_edit_controller.dart';
import '../controllers/settings_controller.dart';
import '../controllers/preferences_controller.dart';
import '../controllers/privacy_controller.dart';
import '../controllers/sports_profile_controller.dart';

// =============================================================================
// CONTROLLER PROVIDERS (Simplified)
// =============================================================================

/*
/// Main profile controller provider
final profileControllerProvider = StateNotifierProvider<ProfileController, ProfileState>((ref) {
  final getProfileUseCase = ref.watch(getProfileUseCaseProvider);
  return ProfileController(getProfileUseCase: getProfileUseCase);
});
*/

/// Profile edit controller provider
final profileEditControllerProvider = StateNotifierProvider<ProfileEditController, ProfileEditState>((ref) {
  return ProfileEditController();
});

/// Settings controller provider
final settingsControllerProvider = StateNotifierProvider<SettingsController, SettingsState>((ref) {
  return SettingsController();
});

/// Preferences controller provider
final preferencesControllerProvider = StateNotifierProvider<PreferencesController, PreferencesState>((ref) {
  return PreferencesController();
});

/// Privacy controller provider
final privacyControllerProvider = StateNotifierProvider<PrivacyController, PrivacyState>((ref) {
  return PrivacyController();
});

/// Sports profile controller provider
final sportsProfileControllerProvider = StateNotifierProvider<SportsProfileController, SportsProfileState>((ref) {
  return SportsProfileController();
});

// =============================================================================
// COMPUTED STATE PROVIDERS
// =============================================================================

/*
/// Current user profile provider
final currentUserProfileProvider = Provider<UserProfile?>((ref) {
  final profileState = ref.watch(profileControllerProvider);
  return profileState.profile;
});
*/

/// Current user settings provider
final currentUserSettingsProvider = Provider<UserSettings?>((ref) {
  final settingsState = ref.watch(settingsControllerProvider);
  return settingsState.settings;
});

/// Current user preferences provider
final currentUserPreferencesProvider = Provider<UserPreferences?>((ref) {
  final preferencesState = ref.watch(preferencesControllerProvider);
  return preferencesState.preferences;
});

/// Current privacy settings provider
final currentPrivacySettingsProvider = Provider<PrivacySettings?>((ref) {
  final privacyState = ref.watch(privacyControllerProvider);
  return privacyState.settings;
});

/// All sports profiles provider
final allSportsProfilesProvider = Provider<List<SportProfile>>((ref) {
  final sportsState = ref.watch(sportsProfileControllerProvider);
  return sportsState.profiles;
});

/// Active sports profiles provider
final activeSportsProfilesProvider = Provider<List<SportProfile>>((ref) {
  final allProfiles = ref.watch(allSportsProfilesProvider);
  return allProfiles.where((profile) => profile.gamesPlayed > 0).toList();
});

/// Primary sport profile provider
final primarySportProfileProvider = Provider<SportProfile?>((ref) {
  final allProfiles = ref.watch(allSportsProfilesProvider);
  try {
    return allProfiles.firstWhere((profile) => profile.isPrimarySport);
  } catch (e) {
    return null;
  }
});

/// Profile completion percentage provider
final profileCompletionProvider = Provider<double>((ref) {
  final profile = ref.watch(currentUserProfileProvider);
  final settings = ref.watch(currentUserSettingsProvider);
  final preferences = ref.watch(currentUserPreferencesProvider);
  final sportsProfiles = ref.watch(allSportsProfilesProvider);

  if (profile == null) return 0.0;

  double completion = 0.0;
  
  // Basic profile info (40%)
  if (profile.firstName?.isNotEmpty == true) completion += 8.0;
  if (profile.lastName?.isNotEmpty == true) completion += 8.0;
  if (profile.email.isNotEmpty) completion += 8.0;
  if (profile.phoneNumber?.isNotEmpty == true) completion += 8.0;
  if (profile.location?.isNotEmpty == true) completion += 8.0;

  // Settings (20%)
  if (settings != null) completion += 20.0;

  // Preferences (20%)
  if (preferences != null) {
    completion += 10.0;
    if (preferences.preferredGameTypes.isNotEmpty) completion += 10.0;
  }

  // Sports profiles (20%)
  if (sportsProfiles.isNotEmpty) {
    completion += 10.0;
    if (sportsProfiles.any((p) => p.isPrimarySport)) completion += 10.0;
  }

  return completion.clamp(0.0, 100.0);
});

/// Profile loading state provider
final isProfileLoadingProvider = Provider<bool>((ref) {
  final profileState = ref.watch(profileControllerProvider);
  final settingsState = ref.watch(settingsControllerProvider);
  final preferencesState = ref.watch(preferencesControllerProvider);
  final privacyState = ref.watch(privacyControllerProvider);
  final sportsState = ref.watch(sportsProfileControllerProvider);

  return profileState.isLoading ||
         settingsState.isLoading ||
         preferencesState.isLoading ||
         privacyState.isLoading ||
         sportsState.isLoading;
});

/// Profile has unsaved changes provider
final hasUnsavedChangesProvider = Provider<bool>((ref) {
  final profileState = ref.watch(profileControllerProvider);
  final settingsState = ref.watch(settingsControllerProvider);
  final preferencesState = ref.watch(preferencesControllerProvider);
  final privacyState = ref.watch(privacyControllerProvider);
  final sportsState = ref.watch(sportsProfileControllerProvider);

  return profileState.hasUnsavedChanges ||
         settingsState.hasUnsavedChanges ||
         preferencesState.hasUnsavedChanges ||
         privacyState.hasUnsavedChanges ||
         sportsState.hasUnsavedChanges;
});

// =============================================================================
// FAMILY PROVIDERS
// =============================================================================

/// Get sports profile by ID
final sportsProfileByIdProvider = Provider.family<SportProfile?, String>((ref, sportId) {
  final sportsController = ref.watch(sportsProfileControllerProvider.notifier);
  return sportsController.getProfileBySport(sportId);
});

// =============================================================================
// UTILITY PROVIDERS
// =============================================================================

/// Initialize all profile data provider
final initializeProfileDataProvider = FutureProvider<bool>((ref) async {
  final profileController = ref.read(profileControllerProvider.notifier);
  final settingsController = ref.read(settingsControllerProvider.notifier);
  final preferencesController = ref.read(preferencesControllerProvider.notifier);
  final privacyController = ref.read(privacyControllerProvider.notifier);
  final sportsController = ref.read(sportsProfileControllerProvider.notifier);

  const userId = 'current-user-id'; // Would come from auth

  try {
    await Future.wait([
      profileController.loadProfile(userId),
      settingsController.loadSettings(userId),
      preferencesController.loadPreferences(userId),
      privacyController.loadPrivacySettings(userId),
      sportsController.loadSportsProfiles(userId),
    ]);
    return true;
  } catch (e) {
    return false;
  }
});

/// Save all profile changes provider
final saveAllProfileChangesProvider = FutureProvider<bool>((ref) async {
  final hasChanges = ref.read(hasUnsavedChangesProvider);
  if (!hasChanges) return true;

  final settingsController = ref.read(settingsControllerProvider.notifier);
  final preferencesController = ref.read(preferencesControllerProvider.notifier);
  final privacyController = ref.read(privacyControllerProvider.notifier);

  final results = await Future.wait([
    settingsController.saveAllChanges(),
    preferencesController.saveAllChanges(),
    privacyController.saveAllChanges(),
  ]);

  return results.every((success) => success);
});
