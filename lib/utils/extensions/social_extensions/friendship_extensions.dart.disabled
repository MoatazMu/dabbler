import '../../../features/social/data/models/friendship_model.dart';
import '../../../features/social/data/models/user_model.dart';
import '../../enums/social_enums.dart';

/// Friendship activity data class
class FriendshipActivity {
  final int messagesExchanged;
  final int postsLiked;
  final int commentsExchanged;
  final DateTime lastInteraction;
  final double interactionFrequency; // interactions per week
  
  const FriendshipActivity({
    required this.messagesExchanged,
    required this.postsLiked,
    required this.commentsExchanged,
    required this.lastInteraction,
    required this.interactionFrequency,
  });
}

/// Suggested activity data class
class SuggestedActivity {
  final String id;
  final String title;
  final String description;
  final String category;
  final int estimatedDuration; // minutes
  final bool requiresBothUsers;
  
  const SuggestedActivity({
    required this.id,
    required this.title,
    required this.description,
    required this.category,
    required this.estimatedDuration,
    this.requiresBothUsers = true,
  });
}

/// Extension on Friendship entity for enhanced functionality
extension FriendshipExtensions on Friendship {
  /// Gets friendship duration formatted in a user-friendly way
  String getFriendshipDurationFormatted() {
    final now = DateTime.now();
    final duration = now.difference(createdAt);
    
    if (duration.inDays < 1) {
      if (duration.inHours < 1) {
        return 'Friends for ${duration.inMinutes}m';
      }
      return 'Friends for ${duration.inHours}h';
    } else if (duration.inDays < 30) {
      return 'Friends for ${duration.inDays}d';
    } else if (duration.inDays < 365) {
      final months = (duration.inDays / 30).floor();
      return 'Friends for ${months}mo';
    } else {
      final years = (duration.inDays / 365).floor();
      final remainingMonths = ((duration.inDays % 365) / 30).floor();
      
      if (remainingMonths == 0) {
        return years == 1 ? 'Friends for 1yr' : 'Friends for ${years}yr';
      }
      
      return 'Friends for ${years}yr ${remainingMonths}mo';
    }
  }
  
  /// Checks if friend request is expired
  bool isRequestExpired({Duration expiryDuration = const Duration(days: 30)}) {
    if (status != FriendshipStatus.pending) return false;
    
    final now = DateTime.now();
    final requestAge = now.difference(createdAt);
    
    return requestAge > expiryDuration;
  }
  
  /// Gets friendship anniversary date
  DateTime getFriendshipAnniversary() {
    // Return the date when friendship was established (accepted)
    return acceptedAt ?? createdAt;
  }
  
  /// Gets next anniversary date
  DateTime getNextAnniversary() {
    final anniversary = getFriendshipAnniversary();
    final now = DateTime.now();
    
    // Calculate this year's anniversary
    DateTime thisYearAnniversary = DateTime(
      now.year,
      anniversary.month,
      anniversary.day,
    );
    
    // If this year's anniversary has passed, return next year's
    if (thisYearAnniversary.isBefore(now)) {
      thisYearAnniversary = DateTime(
        now.year + 1,
        anniversary.month,
        anniversary.day,
      );
    }
    
    return thisYearAnniversary;
  }
  
  /// Calculates interaction frequency based on friendship activity
  FriendshipActivity calculateInteractionFrequency() {
    // In a real implementation, this would analyze actual interaction data
    // For now, return mock data based on friendship duration and status
    
    final duration = DateTime.now().difference(createdAt);
    final weeksAsFriends = (duration.inDays / 7).ceil();
    
    // Mock interaction data based on friendship age
    int messagesExchanged;
    int postsLiked;
    int commentsExchanged;
    double weeklyFrequency;
    
    if (weeksAsFriends < 4) {
      // New friendship - high interaction
      messagesExchanged = weeksAsFriends * 15;
      postsLiked = weeksAsFriends * 8;
      commentsExchanged = weeksAsFriends * 5;
      weeklyFrequency = 12.0;
    } else if (weeksAsFriends < 26) {
      // Medium-term friendship - moderate interaction
      messagesExchanged = weeksAsFriends * 8;
      postsLiked = weeksAsFriends * 4;
      commentsExchanged = weeksAsFriends * 3;
      weeklyFrequency = 6.0;
    } else {
      // Long-term friendship - lower but steady interaction
      messagesExchanged = weeksAsFriends * 4;
      postsLiked = weeksAsFriends * 2;
      commentsExchanged = weeksAsFriends * 2;
      weeklyFrequency = 3.0;
    }
    
    return FriendshipActivity(
      messagesExchanged: messagesExchanged,
      postsLiked: postsLiked,
      commentsExchanged: commentsExchanged,
      lastInteraction: DateTime.now().subtract(Duration(
        days: (7 / weeklyFrequency).round(),
      )),
      interactionFrequency: weeklyFrequency,
    );
  }
  
  /// Gets last interaction date (would query interaction logs in real implementation)
  DateTime? getLastInteractionDate() {
    final activity = calculateInteractionFrequency();
    return activity.lastInteraction;
  }
  
  /// Checks if should show friendship reminder
  bool shouldShowReminder({Duration reminderInterval = const Duration(days: 14)}) {
    final lastInteraction = getLastInteractionDate();
    if (lastInteraction == null) return false;
    
    final daysSinceInteraction = DateTime.now().difference(lastInteraction).inDays;
    
    // Show reminder if no interaction for the specified interval
    return daysSinceInteraction >= reminderInterval.inDays;
  }
  
  /// Calculates friendship strength score (0-100)
  double getFriendshipStrengthScore() {
    double score = 0.0;
    
    // Base score from friendship duration (0-30 points)
    final friendshipAge = DateTime.now().difference(createdAt);
    final durationScore = (friendshipAge.inDays / 365.0 * 30).clamp(0.0, 30.0);
    score += durationScore;
    
    // Interaction frequency score (0-40 points)
    final activity = calculateInteractionFrequency();
    final interactionScore = (activity.interactionFrequency * 2).clamp(0.0, 40.0);
    score += interactionScore;
    
    // Recency bonus (0-20 points)
    final lastInteraction = getLastInteractionDate();
    if (lastInteraction != null) {
      final daysSinceInteraction = DateTime.now().difference(lastInteraction).inDays;
      final recencyScore = (20 - daysSinceInteraction).clamp(0.0, 20.0);
      score += recencyScore;
    }
    
    // Status bonus (0-10 points)
    if (status == FriendshipStatus.friends) {
      score += 10.0;
    } else if (status == FriendshipStatus.close) {
      score += 8.0;
    }
    
    return score.clamp(0.0, 100.0);
  }
  
  /// Formats mutual friends count for display
  String formatMutualFriendsCount(int count) {
    if (count == 0) {
      return 'No mutual friends';
    } else if (count == 1) {
      return '1 mutual friend';
    } else if (count < 10) {
      return '$count mutual friends';
    } else if (count < 100) {
      return '$count+ mutual friends';
    } else {
      return '99+ mutual friends';
    }
  }
  
  /// Gets suggested activities to do together
  List<SuggestedActivity> getSuggestedActivities(
    UserProfile user1,
    UserProfile user2,
  ) {
    final activities = <SuggestedActivity>[];
    
    // Find common interests
    final commonInterests = <String>[];
    if (user1.interests != null && user2.interests != null) {
      commonInterests.addAll(
        user1.interests!.toSet().intersection(user2.interests!.toSet())
      );
    }
    
    // Activity suggestions based on common interests
    for (final interest in commonInterests) {
      switch (interest.toLowerCase()) {
        case 'sports':
          activities.addAll([
            const SuggestedActivity(
              id: 'play_sports',
              title: 'Play Sports Together',
              description: 'Meet up for a game or sports activity',
              category: 'Physical Activity',
              estimatedDuration: 90,
            ),
            const SuggestedActivity(
              id: 'watch_game',
              title: 'Watch a Game',
              description: 'Watch your favorite team play',
              category: 'Entertainment',
              estimatedDuration: 120,
            ),
          ]);
          break;
          
        case 'music':
          activities.addAll([
            const SuggestedActivity(
              id: 'concert',
              title: 'Go to a Concert',
              description: 'Find a concert or music event to attend',
              category: 'Entertainment',
              estimatedDuration: 180,
            ),
            const SuggestedActivity(
              id: 'music_sharing',
              title: 'Share Music Playlists',
              description: 'Exchange your favorite songs and playlists',
              category: 'Digital',
              estimatedDuration: 30,
              requiresBothUsers: false,
            ),
          ]);
          break;
          
        case 'food':
          activities.addAll([
            const SuggestedActivity(
              id: 'try_restaurant',
              title: 'Try a New Restaurant',
              description: 'Discover a new dining experience together',
              category: 'Food & Drink',
              estimatedDuration: 90,
            ),
            const SuggestedActivity(
              id: 'cooking_challenge',
              title: 'Cooking Challenge',
              description: 'Cook the same recipe and compare results',
              category: 'Food & Drink',
              estimatedDuration: 60,
              requiresBothUsers: false,
            ),
          ]);
          break;
          
        case 'gaming':
          activities.addAll([
            const SuggestedActivity(
              id: 'online_gaming',
              title: 'Play Online Games',
              description: 'Team up in your favorite multiplayer game',
              category: 'Gaming',
              estimatedDuration: 60,
            ),
            const SuggestedActivity(
              id: 'gaming_tournament',
              title: 'Join a Tournament',
              description: 'Compete together in a gaming tournament',
              category: 'Gaming',
              estimatedDuration: 120,
            ),
          ]);
          break;
      }
    }
    
    // Generic activities for all friendships
    activities.addAll([
      const SuggestedActivity(
        id: 'coffee_chat',
        title: 'Coffee & Chat',
        description: 'Catch up over coffee or drinks',
        category: 'Social',
        estimatedDuration: 60,
      ),
      const SuggestedActivity(
        id: 'movie_night',
        title: 'Movie Night',
        description: 'Watch a movie together (in person or virtually)',
        category: 'Entertainment',
        estimatedDuration: 120,
      ),
      const SuggestedActivity(
        id: 'walk_talk',
        title: 'Walk & Talk',
        description: 'Take a walk and catch up on life',
        category: 'Physical Activity',
        estimatedDuration: 45,
      ),
      const SuggestedActivity(
        id: 'photo_memories',
        title: 'Share Photo Memories',
        description: 'Look through old photos and share memories',
        category: 'Digital',
        estimatedDuration: 30,
        requiresBothUsers: false,
      ),
    ]);
    
    // Limit to top suggestions based on friendship strength
    final strengthScore = getFriendshipStrengthScore();
    final maxSuggestions = strengthScore > 75 ? 8 : strengthScore > 50 ? 6 : 4;
    
    return activities.take(maxSuggestions).toList();
  }
  
  /// Gets friendship milestone achievements
  List<String> getFriendshipMilestones() {
    final milestones = <String>[];
    final duration = DateTime.now().difference(createdAt);
    
    // Duration milestones
    if (duration.inDays >= 365 * 5) {
      milestones.add('5+ Year Friendship');
    } else if (duration.inDays >= 365 * 2) {
      milestones.add('2+ Year Friendship');
    } else if (duration.inDays >= 365) {
      milestones.add('1+ Year Friendship');
    } else if (duration.inDays >= 180) {
      milestones.add('6+ Month Friendship');
    } else if (duration.inDays >= 30) {
      milestones.add('1+ Month Friendship');
    }
    
    // Interaction milestones
    final activity = calculateInteractionFrequency();
    
    if (activity.messagesExchanged >= 1000) {
      milestones.add('1000+ Messages Exchanged');
    } else if (activity.messagesExchanged >= 500) {
      milestones.add('500+ Messages Exchanged');
    } else if (activity.messagesExchanged >= 100) {
      milestones.add('100+ Messages Exchanged');
    }
    
    if (activity.postsLiked >= 100) {
      milestones.add('100+ Posts Liked');
    } else if (activity.postsLiked >= 50) {
      milestones.add('50+ Posts Liked');
    }
    
    // Strength-based milestones
    final strength = getFriendshipStrengthScore();
    if (strength >= 90) {
      milestones.add('Inseparable Friends');
    } else if (strength >= 75) {
      milestones.add('Close Friends');
    } else if (strength >= 60) {
      milestones.add('Good Friends');
    }
    
    return milestones;
  }
  
  /// Checks if friendship is at risk of becoming inactive
  bool isAtRiskOfInactivity() {
    final activity = calculateInteractionFrequency();
    final daysSinceLastInteraction = DateTime.now()
        .difference(activity.lastInteraction)
        .inDays;
    
    // Consider at risk if no interaction for 30+ days and low frequency
    return daysSinceLastInteraction >= 30 && activity.interactionFrequency < 2.0;
  }
  
  /// Gets friendship health status
  String getFriendshipHealthStatus() {
    final strength = getFriendshipStrengthScore();
    final isAtRisk = isAtRiskOfInactivity();
    
    if (isAtRisk) {
      return 'Needs Attention';
    } else if (strength >= 80) {
      return 'Very Strong';
    } else if (strength >= 60) {
      return 'Strong';
    } else if (strength >= 40) {
      return 'Good';
    } else if (strength >= 20) {
      return 'Developing';
    } else {
      return 'New';
    }
  }
  
  /// Gets days until friendship anniversary
  int getDaysUntilAnniversary() {
    final nextAnniversary = getNextAnniversary();
    final daysUntil = nextAnniversary.difference(DateTime.now()).inDays;
    return daysUntil;
  }
  
  /// Checks if anniversary is coming up soon
  bool isAnniversarySoon({int daysThreshold = 7}) {
    return getDaysUntilAnniversary() <= daysThreshold;
  }
  
  /// Gets recommended interaction for this friendship
  String getRecommendedInteraction() {
    final strength = getFriendshipStrengthScore();
    final daysSinceInteraction = getLastInteractionDate() != null
        ? DateTime.now().difference(getLastInteractionDate()!).inDays
        : 999;
    
    if (daysSinceInteraction > 30) {
      return 'Send a message to reconnect';
    } else if (daysSinceInteraction > 14) {
      return 'Like or comment on their recent posts';
    } else if (strength > 70) {
      return 'Plan an activity together';
    } else if (daysSinceInteraction > 7) {
      return 'Share something they might find interesting';
    } else {
      return 'Your friendship is active and healthy!';
    }
  }
}
