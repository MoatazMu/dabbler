// Stubbed for build unblock
  }
  
  /// Generates a human-readable reason for the suggestion
  String getSuggestionReason(FriendSuggestion suggestion) {
    final reasons = <String>[];
    
    if (suggestion.mutualFriendsCount > 0) {
      final friendText = suggestion.mutualFriendsCount == 1 
          ? 'mutual friend' 
          : 'mutual friends';
      reasons.add('${suggestion.mutualFriendsCount} $friendText');
    }
    
    if (suggestion.commonSportsCount > 0) {
      final sportText = suggestion.commonSportsCount == 1 
          ? 'sport' 
          : 'sports';
      reasons.add('Plays ${suggestion.commonSportsCount} same $sportText');
    }
    
    if (suggestion.distanceKm != null && suggestion.distanceKm! < 30) {
      reasons.add('${suggestion.distanceKm!.round()}km away');
    }
    
    if (suggestion.isCoworker == true) {
      reasons.add('Works at same company');
    }
    
    if (suggestion.hasCommonEducation == true) {
      reasons.add('Went to same school');
    }
    
    return reasons.isEmpty ? 'Suggested for you' : reasons.join(' â€¢ ');
  }
  
  /// Gets mutual interests between two users
  List<String> getMutualInterests(
    UserProfile user1,
    UserProfile user2,
  ) {
    final interests = <String>[];
    
    // Common sports
    final commonSports = user1.sportsProfiles
        .where((s1) => user2.sportsProfiles.any((s2) => s2.sportId == s1.sportId))
        .map((s) => s.sportName);
    interests.addAll(commonSports);
    
    // Similar skill levels
    final avgSkill1 = user1.getAverageSkillLevel();
    final avgSkill2 = user2.getAverageSkillLevel();
    if ((avgSkill1 - avgSkill2).abs() < 1) {
      interests.add('Similar skill level');
    }
    
    // Common location
    if (user1.location != null && user2.location != null) {
      final distance = _calculateDistance(
        user1.location!.latitude,
        user1.location!.longitude,
        user2.location!.latitude,
        user2.location!.longitude,
      );
      if (distance < 20) {
        interests.add('Lives nearby');
      }
    }
    
    return interests;
  }
  
  /// Filters suggestions based on user preferences
  List<FriendSuggestion> filterSuggestions({
    required List<FriendSuggestion> suggestions,
    required UserProfile currentUser,
    double? maxDistance,
    List<String>? sportsFilter,
    int? minMutualFriends,
  }) {
    return suggestions.where((suggestion) {
      // Distance filter
      if (maxDistance != null && suggestion.distanceKm != null) {
        if (suggestion.distanceKm! > maxDistance) return false;
      }
      
      // Sports filter
      if (sportsFilter != null && sportsFilter.isNotEmpty) {
        final hasSport = sportsFilter.any((sport) => 
            suggestion.sports.contains(sport));
        if (!hasSport) return false;
      }
      
      // Minimum mutual friends filter
      if (minMutualFriends != null) {
        if (suggestion.mutualFriendsCount < minMutualFriends) return false;
      }
      
      return true;
    }).toList();
  }
  
  /// Groups suggestions by category for better UX
  Map<String, List<FriendSuggestion>> groupSuggestions(
    List<FriendSuggestion> suggestions,
  ) {
    final groups = <String, List<FriendSuggestion>>{
      'mutual_friends': [],
      'nearby': [],
      'same_sports': [],
      'other': [],
    };
    
    for (final suggestion in suggestions) {
      if (suggestion.mutualFriendsCount > 0) {
        groups['mutual_friends']!.add(suggestion);
      } else if (suggestion.distanceKm != null && suggestion.distanceKm! < 10) {
        groups['nearby']!.add(suggestion);
      } else if (suggestion.commonSportsCount > 0) {
        groups['same_sports']!.add(suggestion);
      } else {
        groups['other']!.add(suggestion);
      }
    }
    
    // Remove empty groups
    groups.removeWhere((key, value) => value.isEmpty);
    
    return groups;
  }
  
  /// Gets the category display name
  String getCategoryDisplayName(String category) {
    switch (category) {
      case 'mutual_friends':
        return 'People You May Know';
      case 'nearby':
        return 'People Nearby';
      case 'same_sports':
        return 'Players Like You';
      case 'other':
        return 'Suggested for You';
      default:
        return 'Suggestions';
    }
  }
  
  /// Calculates distance between two coordinates
  double _calculateDistance(
    double lat1,
    double lon1,
    double lat2,
    double lon2,
  ) {
    const double earthRadius = 6371; // km
    
    final dLat = _toRadians(lat2 - lat1);
    final dLon = _toRadians(lon2 - lon1);
    
    final a = sin(dLat / 2) * sin(dLat / 2) +
        cos(_toRadians(lat1)) * cos(_toRadians(lat2)) *
        sin(dLon / 2) * sin(dLon / 2);
    
    final c = 2 * asin(sqrt(a));
    
    return earthRadius * c;
  }
  
  /// Converts degrees to radians
  double _toRadians(double degrees) {
    return degrees * (pi / 180);
  }
  
  /// Validates suggestion quality
  bool isQualitySuggestion(FriendSuggestion suggestion) {
    // Check if suggestion meets minimum quality criteria
    if (suggestion.relevanceScore < 10) return false;
    if (suggestion.profileCompleteness < 30) return false;
    if (suggestion.isBlocked == true) return false;
    if (suggestion.isPending == true) return false;
    
    return true;
  }
  
  /// Gets suggestion confidence level
  String getConfidenceLevel(FriendSuggestion suggestion) {
    if (suggestion.relevanceScore >= 80) return 'Very High';
    if (suggestion.relevanceScore >= 60) return 'High';
    if (suggestion.relevanceScore >= 40) return 'Medium';
    if (suggestion.relevanceScore >= 20) return 'Low';
    return 'Very Low';
  }
}
